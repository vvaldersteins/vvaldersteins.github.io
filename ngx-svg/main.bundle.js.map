{"version":3,"sources":["/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/$_lazy_route_resource lazy","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/app.component.css","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/app.component.html","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/app.component.ts","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/app.module.ts","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/components/header/header.component.html","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/components/header/header.component.ts","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/circle/circle.component.html","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/circle/circle.component.ts","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/ellipse/ellipse.component.html","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/ellipse/ellipse.component.ts","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/home/home.component.html","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/home/home.component.ts","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/image/image.component.html","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/image/image.component.ts","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/line/line.component.html","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/line/line.component.ts","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/polygon/polygon.component.html","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/polygon/polygon.component.ts","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/polyline/polyline.component.html","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/polyline/polyline.component.ts","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/rect/rect.component.html","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/rect/rect.component.ts","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/text/text.component.html","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/text/text.component.ts","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/environments/environment.ts","/home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/main.ts"],"names":[],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,yF;;;;;;;ACVA;AACA;;;AAGA;AACA;;AAEA;;;AAGA;AACA,2C;;;;;;;ACXA,6H;;;;;;;;;;;;;;;;ACA0C;AAO1C;IALA;QAME,UAAK,GAAG,KAAK,CAAC;IAChB,CAAC;IAFY,YAAY;QALxB,wEAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPzB;;GAEG;AACuD;AACH;AACV;AACJ;AAEzC;;GAEG;AACoC;AAEvC;;GAEG;AAC4C;AACwB;AAEvE;;GAEG;AACyD;AACA;AACM;AACN;AACS;AACG;AACH;AACN;AACH;AAE5D;;GAEG;AACH,IAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,iFAAa,EAAE;IAC1C,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,iFAAa,EAAE;IAC1C,EAAE,IAAI,EAAE,QAAQ,EAAE,SAAS,EAAE,uFAAe,EAAE;IAC9C,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,kFAAa,EAAE;IAC1C,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,2FAAgB,EAAE;IAChD,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,8FAAiB,EAAE;IAClD,EAAE,IAAI,EAAE,SAAS,EAAE,SAAS,EAAE,2FAAgB,EAAE;IAChD,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,qFAAc,EAAE;IAC5C,EAAE,IAAI,EAAE,MAAM,EAAE,SAAS,EAAE,kFAAa,EAAE;IAC1C,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,OAAO,EAAE;CACrD,CAAC;AA2BF;IAAA;IAAyB,CAAC;IAAb,SAAS;QAzBrB,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,oEAAY;gBACZ,4FAAe;gBACf,iFAAa;gBACb,iFAAa;gBACb,uFAAe;gBACf,kFAAa;gBACb,2FAAgB;gBAChB,8FAAiB;gBACjB,2FAAgB;gBAChB,qFAAc;gBACd,kFAAa;aACd;YACD,OAAO,EAAE;gBACP,gFAAa;gBACb,qEAAY,CAAC,OAAO,CAClB,MAAM,CACP;gBACD,6DAAY;gBACZ,mEAAW;aACZ;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,oEAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;ACzEtB,4iE;;;;;;;;;;;;;;;;;;;ACAA;;GAEG;AACuC;AAM1C;IACE;;OAEG;IACH;IAAgB,CAAC;IAJN,eAAe;QAJ3B,wEAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;SAEvB,CAAC;;OACW,eAAe,CAK3B;IAAD,sBAAC;CAAA;AAL2B;;;;;;;;ACT5B,mnCAAmnC,mBAAmB,yEAAyE,aAAa,qwC;;;;;;;;;;;;;;;;;;;ACA5tC;;GAEG;AAC0D;AAY7D;IAgBE;;OAEG;IACH,yBACU,KAAwB;QAAxB,UAAK,GAAL,KAAK,CAAmB;QAnBlC;;WAEG;QACK,YAAO,GAAa,CAAC;gBAC3B,MAAM,EAAE,EAAE;gBACV,KAAK,EAAE,yBAAyB;gBAChC,CAAC,EAAE,EAAE;gBACL,CAAC,EAAE,EAAE;aACN,EAAE;gBACD,MAAM,EAAE,EAAE;gBACV,KAAK,EAAE,wBAAwB;gBAC/B,CAAC,EAAE,EAAE;gBACL,CAAC,EAAE,EAAE;aACN,CAAC,CAAC;IAOC,CAAC;IAEL;;OAEG;IACH,gCAAM,GAAN;QACE,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;YAChB,MAAM,EAAE,CAAC;YACT,KAAK,EAAE,MAAM;YACb,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;SACL,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,mCAAS,GAAT;QACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,YAAE,IAAI,SAAE,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,EAApB,CAAoB,CAAC,CAAC,GAAG,EAAE,CAAC;IACjF,CAAC;IAED;;;OAGG;IACH,mCAAS,GAAT,UAAU,KAAa;QACrB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC;IAjDU,eAAe;QAH3B,wEAAS,CAAC;;SAEV,CAAC;yCAqBiB,wEAAiB;OApBvB,eAAe,CAkD3B;IAAD,sBAAC;CAAA;AAlD2B;;;;;;;;ACf5B,2rCAA2rC,mBAAmB,yEAAyE,aAAa,25C;;;;;;;;;;;;;;;;;;;ACApyC;;GAEG;AACuC;AAa1C;IAkBE;;OAEG;IACH;QApBA;;WAEG;QACK,aAAQ,GAAc,CAAC;gBAC7B,MAAM,EAAE,EAAE;gBACV,KAAK,EAAE,GAAG;gBACV,KAAK,EAAE,yBAAyB;gBAChC,CAAC,EAAE,EAAE;gBACL,CAAC,EAAE,EAAE;aACN,EAAE;gBACD,MAAM,EAAE,EAAE;gBACV,KAAK,EAAE,EAAE;gBACT,KAAK,EAAE,wBAAwB;gBAC/B,CAAC,EAAE,GAAG;gBACN,CAAC,EAAE,EAAE;aACN,CAAC,CAAC;IAKa,CAAC;IAEjB;;OAEG;IACH,iCAAM,GAAN;QACE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YACjB,MAAM,EAAE,CAAC;YACT,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,MAAM;YACb,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;SACL,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,oCAAS,GAAT;QACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAE,IAAI,SAAE,CAAC,MAAM,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,EAApB,CAAoB,CAAC,CAAC,GAAG,EAAE,CAAC;IAClF,CAAC;IAED;;;OAGG;IACH,oCAAS,GAAT,UAAU,KAAa;QACrB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACjC,CAAC;IAlDU,gBAAgB;QAH5B,wEAAS,CAAC;;SAEV,CAAC;;OACW,gBAAgB,CAmD5B;IAAD,uBAAC;CAAA;AAnD4B;;;;;;;;AChB7B,k9GAAk9G,GAAG,IAAI,gBAAgB,GAAG,IAAI,gBAAgB,mKAAmK,GAAG,IAAI,0BAA0B,2CAA2C,MAAM,6BAA6B,4BAA4B,sCAAsC,MAAM,+BAA+B,MAAM,sCAAsC,4BAA4B,0CAA0C,oCAAoC,GAAG,IAAI,4CAA4C,GAAG,IAAI,GAAG,GAAG,IAAI,qcAAqc,6CAA6C,0BAA0B,yBAAyB,kBAAkB,gqHAAgqH,YAAY,KAAK,aAAa,mqIAAmqI,YAAY,KAAK,aAAa,u3HAAu3H,cAAc,KAAK,eAAe,qkHAAqkH,eAAe,KAAK,gBAAgB,+2HAA+2H,gBAAgB,KAAK,iBAAiB,ssHAAssH,eAAe,KAAK,gBAAgB,0rHAA0rH,aAAa,KAAK,cAAc,m0HAAm0H,YAAY,KAAK,aAAa,0kI;;;;;;;;;;;;;;;;;;;ACArsmC;;GAEG;AACuC;AAK1C;IACE;;OAEG;IACH;IAAgB,CAAC;IAJN,aAAa;QAHzB,wEAAS,CAAC;;SAEV,CAAC;;OACW,aAAa,CAKzB;IAAD,oBAAC;CAAA;AALyB;;;;;;;;ACR1B,mqCAAmqC,mBAAmB,yEAAyE,aAAa,84C;;;;;;;;;;;;;;;;;;;ACA5wC;;GAEG;AAC0D;AAa7D;IAYE;;OAEG;IACH,wBACU,KAAwB;QAAxB,UAAK,GAAL,KAAK,CAAmB;QAflC;;WAEG;QACK,WAAM,GAAY,CAAC;gBACzB,QAAQ,EAAE,wBAAwB;gBAClC,CAAC,EAAE,GAAG;gBACN,CAAC,EAAE,GAAG;gBACN,KAAK,EAAE,GAAG;gBACV,MAAM,EAAE,GAAG;aACZ,CAAC,CAAC;IAOC,CAAC;IAEL,gCAAO,GAAP,UAAQ,KAAK,IAAI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAEtC;;OAEG;IACH,+BAAM,GAAN;QACE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC;YACf,QAAQ,EAAE,wBAAwB;YAClC,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;YACJ,KAAK,EAAE,GAAG;YACV,MAAM,EAAE,GAAG;SACZ,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,kCAAS,GAAT;QACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAE,IAAI,SAAE,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,EAAhB,CAAgB,CAAC,CAAC,GAAG,EAAE,CAAC;IAC5E,CAAC;IAED;;;OAGG;IACH,kCAAS,GAAT,UAAU,KAAa;QACrB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC;IAhDU,cAAc;QAH1B,wEAAS,CAAC;;SAEV,CAAC;yCAiBiB,wEAAiB;OAhBvB,cAAc,CAiD1B;IAAD,qBAAC;CAAA;AAjD0B;;;;;;;;AChB3B,mvCAAmvC,mBAAmB,yEAAyE,aAAa,qhD;;;;;;;;;;;;;;;;;;;ACA51C;;GAEG;AACuC;AAc1C;IA2BE;;OAEG;IACH;QA7BA;;WAEG;QACK,UAAK,GAAW,CAAC;gBACvB,UAAU,EAAE,EAAE;gBACd,WAAW,EAAE,yBAAyB;gBACtC,EAAE,EAAE,EAAE;gBACN,EAAE,EAAE,EAAE;gBACN,EAAE,EAAE,EAAE;gBACN,EAAE,EAAE,EAAE;aACP,EAAE;gBACD,UAAU,EAAE,EAAE;gBACd,WAAW,EAAE,wBAAwB;gBACrC,EAAE,EAAE,EAAE;gBACN,EAAE,EAAE,EAAE;gBACN,EAAE,EAAE,EAAE;gBACN,EAAE,EAAE,EAAE;aACP,EAAE;gBACD,UAAU,EAAE,EAAE;gBACd,WAAW,EAAE,uBAAuB;gBACpC,EAAE,EAAE,EAAE;gBACN,EAAE,EAAE,EAAE;gBACN,EAAE,EAAE,EAAE;gBACN,EAAE,EAAE,EAAE;aACP,CAAC,CAAC;IAKa,CAAC;IAEjB;;OAEG;IACH,8BAAM,GAAN;QACE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;YACd,UAAU,EAAE,CAAC;YACb,WAAW,EAAE,MAAM;YACnB,EAAE,EAAE,CAAC;YACL,EAAE,EAAE,CAAC;YACL,EAAE,EAAE,CAAC;YACL,EAAE,EAAE,CAAC;SACN,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,iCAAS,GAAT;QACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,YAAE;YAC3C,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;gBAClB,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC;YACf,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC;YACf,CAAC;QACH,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IACX,CAAC;IAED;;;OAGG;IACH,iCAAS,GAAT,UAAU,KAAa;QACrB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC9B,CAAC;IAlEU,aAAa;QAHzB,wEAAS,CAAC;;SAEV,CAAC;;OACW,aAAa,CAmEzB;IAAD,oBAAC;CAAA;AAnEyB;;;;;;;;ACjB1B,+rCAA+rC,mBAAmB,yEAAyE,aAAa,u1BAAu1B,wBAAwB,8tD;;;;;;;;;;;;;;;;;;;ACAvpE;;GAEG;AACuC;AAY1C;IAgBE;;OAEG;IACH;QAlBA;;WAEG;QACK,aAAQ,GAAc,CAAC;gBAC7B,UAAU,EAAE,CAAC;gBACb,WAAW,EAAE,yBAAyB;gBACtC,IAAI,EAAE,yBAAyB;gBAC/B,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;aACrD,EAAE;gBACD,UAAU,EAAE,CAAC;gBACb,WAAW,EAAE,sBAAsB;gBACnC,IAAI,EAAE,kBAAkB;gBACxB,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;aACzG,CAAC,CAAC;IAKa,CAAC;IAEjB;;OAEG;IACH,iCAAM,GAAN;QACE,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC;YACjB,UAAU,EAAE,CAAC;YACb,WAAW,EAAE,MAAM;YACnB,MAAM,EAAE,CAAC,EAAE,CAAC;SACb,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,oCAAS,GAAT;QACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,YAAE;YAC9C,IAAI,QAAQ,CAAC;YACb,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,eAAK;gBAClD,EAAE,CAAC,CAAC,QAAQ,KAAK,SAAS,IAAI,CAAC,QAAQ,KAAK,SAAS,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC9E,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtB,CAAC;gBAED,MAAM,CAAC,QAAQ,CAAC;YAClB,CAAC,CAAC,CAAC,CAAC;YAEJ,MAAM,CAAC,GAAG,CAAC;QACb,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IACX,CAAC;IAED;;;OAGG;IACH,sCAAW,GAAX,UAAY,OAAgB;QAC1B,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC1B,CAAC;IAED;;;;OAIG;IACH,sCAAW,GAAX,UAAY,OAAgB,EAAE,KAAa;QACzC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAClC,CAAC;IAED;;;OAGG;IACH,oCAAS,GAAT,UAAU,KAAa;QACrB,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACjC,CAAC;IA1EU,gBAAgB;QAH5B,wEAAS,CAAC;;SAEV,CAAC;;OACW,gBAAgB,CA2E5B;IAAD,uBAAC;CAAA;AA3E4B;;;;;;;;ACf7B,6sCAA6sC,mBAAmB,yEAAyE,aAAa,41BAA41B,wBAAwB,quD;;;;;;;;;;;;;;;;;;;ACA1qE;;GAEG;AACuC;AAY1C;IAgBE;;OAEG;IACH;QAlBA;;WAEG;QACK,cAAS,GAAe,CAAC;gBAC/B,UAAU,EAAE,CAAC;gBACb,WAAW,EAAE,yBAAyB;gBACtC,IAAI,EAAE,yBAAyB;gBAC/B,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;aAChE,EAAE;gBACD,UAAU,EAAE,CAAC;gBACb,WAAW,EAAE,sBAAsB;gBACnC,IAAI,EAAE,kBAAkB;gBACxB,MAAM,EAAE,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;aACzG,CAAC,CAAC;IAKa,CAAC;IAEjB;;OAEG;IACH,kCAAM,GAAN;QACE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC;YAClB,UAAU,EAAE,CAAC;YACb,WAAW,EAAE,MAAM;YACnB,MAAM,EAAE,CAAC,EAAE,CAAC;SACb,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,qCAAS,GAAT;QACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,YAAE;YAC/C,IAAI,QAAQ,CAAC;YACb,IAAM,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,eAAK;gBAClD,EAAE,CAAC,CAAC,QAAQ,KAAK,SAAS,IAAI,CAAC,QAAQ,KAAK,SAAS,IAAI,KAAK,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC9E,QAAQ,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtB,CAAC;gBAED,MAAM,CAAC,QAAQ,CAAC;YAClB,CAAC,CAAC,CAAC,CAAC;YAEJ,MAAM,CAAC,GAAG,CAAC;QACb,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC;IACX,CAAC;IAED;;;OAGG;IACH,uCAAW,GAAX,UAAY,QAAkB;QAC5B,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC;IAED;;;;OAIG;IACH,uCAAW,GAAX,UAAY,QAAkB,EAAE,KAAa;QAC3C,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACnC,CAAC;IAED;;;OAGG;IACH,qCAAS,GAAT,UAAU,KAAa;QACrB,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAClC,CAAC;IA1EU,iBAAiB;QAH7B,wEAAS,CAAC;;SAEV,CAAC;;OACW,iBAAiB,CA2E7B;IAAD,wBAAC;CAAA;AA3E6B;;;;;;;;ACf9B,0uCAA0uC,mBAAmB,yEAAyE,aAAa,27C;;;;;;;;;;;;;;;;;;;ACAn1C;;GAEG;AACuC;AAa1C;IAkBE;;OAEG;IACH;QApBA;;WAEG;QACK,iBAAY,GAAkB,CAAC;gBACrC,MAAM,EAAE,GAAG;gBACX,KAAK,EAAE,GAAG;gBACV,KAAK,EAAE,yBAAyB;gBAChC,CAAC,EAAE,EAAE;gBACL,CAAC,EAAE,EAAE;aACN,EAAE;gBACD,MAAM,EAAE,EAAE;gBACV,KAAK,EAAE,EAAE;gBACT,KAAK,EAAE,wBAAwB;gBAC/B,CAAC,EAAE,GAAG;gBACN,CAAC,EAAE,EAAE;aACN,CAAC,CAAC;IAKa,CAAC;IAEjB;;OAEG;IACH,8BAAM,GAAN;QACE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;YACrB,MAAM,EAAE,CAAC;YACT,KAAK,EAAE,CAAC;YACR,KAAK,EAAE,MAAM;YACb,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;SACL,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,iCAAS,GAAT;QACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,YAAE,IAAI,SAAE,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,EAAhB,CAAgB,CAAC,CAAC,GAAG,EAAE,CAAC;IAClF,CAAC;IAED;;;OAGG;IACH,iCAAS,GAAT,UAAU,KAAa;QACrB,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IACrC,CAAC;IAlDU,aAAa;QAHzB,wEAAS,CAAC;;SAEV,CAAC;;OACW,aAAa,CAmDzB;IAAD,oBAAC;CAAA;AAnDyB;;;;;;;;AChB1B,+nCAA+nC,mBAAmB,yEAAyE,aAAa,g4C;;;;;;;;;;;;;;;;;;;ACAxuC;;GAEG;AACuC;AAa1C;IAkBE;;OAEG;IACH;QApBA;;WAEG;QACK,UAAK,GAAW,CAAC;gBACvB,IAAI,EAAE,4CAA4C;gBAClD,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE,yBAAyB;gBAChC,CAAC,EAAE,EAAE;gBACL,CAAC,EAAE,EAAE;aACN,EAAE;gBACD,IAAI,EAAE,uDAAuD;gBAC7D,IAAI,EAAE,EAAE;gBACR,KAAK,EAAE,wBAAwB;gBAC/B,CAAC,EAAE,GAAG;gBACN,CAAC,EAAE,EAAE;aACN,CAAC,CAAC;IAKa,CAAC;IAEjB;;OAEG;IACH,8BAAM,GAAN;QACE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;YACd,IAAI,EAAE,EAAE;YACR,IAAI,EAAE,EAAE;YACR,KAAK,EAAE,MAAM;YACb,CAAC,EAAE,CAAC;YACJ,CAAC,EAAE,CAAC;SACL,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,iCAAS,GAAT;QACE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,YAAE,IAAI,SAAE,CAAC,CAAC,EAAJ,CAAI,CAAC,CAAC,GAAG,EAAE,CAAC;IAC/D,CAAC;IAED;;;OAGG;IACH,iCAAS,GAAT,UAAU,KAAa;QACrB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC9B,CAAC;IAlDU,aAAa;QAHzB,wEAAS,CAAC;;SAEV,CAAC;;OACW,aAAa,CAmDzB;IAAD,oBAAC;CAAA;AAnDyB;;;;;;;;;AChB1B;AAAA,mFAAmF;AACnF,8FAA8F;AAC9F,yEAAyE;AACzE,gFAAgF;AAEzE,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;;;;;;;;;;;;;;ACP6C;AAC4B;AAE9B;AACY;AAEzD,EAAE,CAAC,CAAC,8EAAW,CAAC,UAAU,CAAC,CAAC,CAAC;IAC3B,+EAAc,EAAE,CAAC;AACnB,CAAC;AAED,yGAAsB,EAAE,CAAC,eAAe,CAAC,kEAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,GAAG,CAAC,GAAG,CAAC,EAAhB,CAAgB,CAAC,CAAC","file":"main.bundle.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../../../../src/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/$$_lazy_route_resource lazy\n// module id = ../../../../../src/$$_lazy_route_resource lazy recursive\n// module chunks = main","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/app.component.css\n// module id = ../../../../../src/app/app.component.css\n// module chunks = main","module.exports = \"<!-- App Header -->\\n<app-header></app-header>\\n\\n<!-- Router content -->\\n<router-outlet></router-outlet>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/app.component.html\n// module id = ../../../../../src/app/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/app.component.ts","/**\n * Import Angular libraries.\n */\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\n\n/**\n * Import third-party libraries.\n */\nimport { NgxSvgModule } from 'ngx-svg';\n\n/**\n * Import custom components.\n */\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './components/header/header.component';\n\n/**\n * Import custom pages.\n */\nimport { HomeComponent } from './pages/home/home.component';\nimport { RectComponent } from './pages/rect/rect.component';\nimport { CircleComponent } from './pages/circle/circle.component';\nimport { LineComponent } from './pages/line/line.component';\nimport { EllipseComponent } from './pages/ellipse/ellipse.component';\nimport { PolylineComponent } from './pages/polyline/polyline.component';\nimport { PolygonComponent } from './pages/polygon/polygon.component';\nimport { ImageComponent } from './pages/image/image.component';\nimport { TextComponent } from './pages/text/text.component';\n\n/**\n * Define page routes.\n */\nconst routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'rect', component: RectComponent },\n  { path: 'circle', component: CircleComponent },\n  { path: 'line', component: LineComponent },\n  { path: 'ellipse', component: EllipseComponent },\n  { path: 'polyline', component: PolylineComponent },\n  { path: 'polygon', component: PolygonComponent },\n  { path: 'image', component: ImageComponent },\n  { path: 'text', component: TextComponent },\n  { path: '', pathMatch: 'full', redirectTo: '/home' }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    HomeComponent,\n    RectComponent,\n    CircleComponent,\n    LineComponent,\n    EllipseComponent,\n    PolylineComponent,\n    PolygonComponent,\n    ImageComponent,\n    TextComponent\n  ],\n  imports: [\n    BrowserModule,\n    RouterModule.forRoot(\n      routes\n    ),\n    NgxSvgModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/app.module.ts","module.exports = \"<nav class=\\\"navbar navbar-expand-lg navbar-dark bg-dark\\\">\\n  <a class=\\\"navbar-brand\\\" routerLink=\\\"/\\\">\\n    ngx-svg <small class=\\\"extra-small\\\"><i>v0.4.2</i></small>\\n  </a>\\n  <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#main-navigation\\\" aria-controls=\\\"main-navigation\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\n    <span class=\\\"navbar-toggler-icon\\\"></span>\\n  </button>\\n  <div class=\\\"collapse navbar-collapse\\\" id=\\\"main-navigation\\\">\\n    <ul class=\\\"navbar-nav mr-auto\\\">\\n      <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/home\\\">Home</a>\\n      </li>\\n      <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/rect\\\">Rect</a>\\n      </li>\\n      <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/circle\\\">Circle</a>\\n      </li>\\n      <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/ellipse\\\">Ellipse</a>\\n      </li>\\n      <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/line\\\">Line</a>\\n      </li>\\n      <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/polyline\\\">Polyline</a>\\n      </li>\\n      <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/polygon\\\">Polygon</a>\\n      </li>\\n      <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/image\\\">Image</a>\\n      </li>\\n      <li class=\\\"nav-item\\\" routerLinkActive=\\\"active\\\">\\n        <a class=\\\"nav-link\\\" routerLink=\\\"/text\\\">Text</a>\\n      </li>\\n    </ul>\\n    <a class=\\\"btn btn-dark\\\" href=\\\"https://github.com/vvaldersteins/ngx-svg\\\" target=\\\"_blank\\\"><i class=\\\"fa fa-github\\\"></i> GitHub</a>\\n    <a class=\\\"btn btn-dark\\\" href=\\\"https://www.npmjs.com/package/ngx-svg\\\" target=\\\"_blank\\\"><i class=\\\"fa fa-npm\\\"></i> NPM</a>\\n  </div>\\n</nav>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/components/header/header.component.html\n// module id = ../../../../../src/app/components/header/header.component.html\n// module chunks = main","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: 'header.component.html'\n})\nexport class HeaderComponent {\n  /**\n   * Does all required pre-requisites and creates header component instance.\n   */\n  constructor() { }\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/components/header/header.component.ts","module.exports = \"<!-- Header of the circle -->\\n<div class=\\\"jumbotron jumbotron-fluid\\\">\\n  <div class=\\\"container\\\">\\n    <h1 class=\\\"display-4 text-center\\\">Circle</h1>\\n  </div>\\n</div>\\n\\n<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row no-gutters\\\">\\n    <div class=\\\"col-12\\\">\\n      <!-- Svg Container with circles -->\\n      <svg-container containerId=\\\"circle\\\" [height]=\\\"getHeight()\\\">\\n        <svg-circle [radius]=\\\"circle.radius\\\" [color]=\\\"circle.color\\\"\\n          [x]=\\\"circle.x\\\" [y]=\\\"circle.y\\\" *ngFor=\\\"let circle of circles\\\"></svg-circle>\\n      </svg-container>\\n    </div>\\n\\n    <div class=\\\"col-12\\\">\\n      <!-- Svg Circle configuration -->\\n      <div class=\\\"table-responsive\\\">\\n        <table class=\\\"table\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Radius</th>\\n              <th>Color</th>\\n              <th>X position</th>\\n              <th>Y position</th>\\n              <th>Actions</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"circles.length > 0\\\">\\n              <tr *ngFor=\\\"let circle of circles; let index = index;\\\">\\n                <td class=\\\"align-middle\\\">\\n                  <b>{{ index + 1 }}</b>\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"circle.radius\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"string\\\" [(ngModel)]=\\\"circle.color\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"circle.x\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"circle.y\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <button class=\\\"btn btn-danger\\\" (click)=\\\"removeRow(index)\\\">Remove</button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <tr *ngIf=\\\"circles.length === 0\\\">\\n              <td colspan=\\\"6\\\" class=\\\"text-center\\\">\\n                There are no circles\\n              </td>\\n            </tr>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <td colspan=\\\"6\\\">\\n                <button class=\\\"btn btn-success float-right\\\" (click)=\\\"addNew()\\\">Add New circle</button>\\n              </td>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/circle/circle.component.html\n// module id = ../../../../../src/app/pages/circle/circle.component.html\n// module chunks = main","/**\n * Import Angular libraries.\n */\nimport { Component, ChangeDetectorRef } from '@angular/core';\n\ninterface Circle {\n  radius: number;\n  color?: string;\n  x?: number;\n  y?: number;\n}\n\n@Component({\n  templateUrl: 'circle.component.html'\n})\nexport class CircleComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  private circles: Circle[] = [{\n    radius: 45,\n    color: 'rgba(125, 125, 32, 0.5)',\n    x: 20,\n    y: 30\n  }, {\n    radius: 30,\n    color: 'rgba(12, 32, 222, 0.7)',\n    x: 70,\n    y: 30\n  }];\n\n  /**\n   * Creates circle component object instance.\n   */\n  constructor(\n    private cdRef: ChangeDetectorRef\n  ) { }\n\n  /**\n   * Adds new circle element.\n   */\n  addNew() {\n    this.circles.push({\n      radius: 0,\n      color: '#000',\n      x: 0,\n      y: 0\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.circles.map(el => el.radius * 2 + el.y)) + 20;\n  }\n\n  /**\n   * Removes specific circle element.\n   * @param index - Index of circle, which needs to be removed.\n   */\n  removeRow(index: number) {\n    this.circles.splice(index, 1);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/circle/circle.component.ts","module.exports = \"<!-- Header of the ellipse -->\\n<div class=\\\"jumbotron jumbotron-fluid\\\">\\n  <div class=\\\"container\\\">\\n    <h1 class=\\\"display-4 text-center\\\">Ellipse</h1>\\n  </div>\\n</div>\\n\\n<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row no-gutters\\\">\\n    <div class=\\\"col-12\\\">\\n      <!-- Svg Container with ellipses -->\\n      <svg-container containerId=\\\"ellipse\\\" [height]=\\\"getHeight()\\\">\\n        <svg-ellipse [height]=\\\"ellipse.height\\\" [width]=\\\"ellipse.width\\\" [color]=\\\"ellipse.color\\\"\\n          [x]=\\\"ellipse.x\\\" [y]=\\\"ellipse.y\\\" *ngFor=\\\"let ellipse of ellipses\\\"></svg-ellipse>\\n      </svg-container>\\n    </div>\\n\\n    <div class=\\\"col-12\\\">\\n      <!-- Svg Ellipse configuration -->\\n      <div class=\\\"table-responsive\\\">\\n        <table class=\\\"table\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Height</th>\\n              <th>Width</th>\\n              <th>Color</th>\\n              <th>X position</th>\\n              <th>Y position</th>\\n              <th>Actions</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"ellipses.length > 0\\\">\\n              <tr *ngFor=\\\"let ellipse of ellipses; let index = index;\\\">\\n                <td class=\\\"align-middle\\\">\\n                  <b>{{ index + 1 }}</b>\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"ellipse.height\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"ellipse.width\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"string\\\" [(ngModel)]=\\\"ellipse.color\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"ellipse.x\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"ellipse.y\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <button class=\\\"btn btn-danger\\\" (click)=\\\"removeRow(index)\\\">Remove</button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <tr *ngIf=\\\"ellipses.length === 0\\\">\\n              <td colspan=\\\"7\\\" class=\\\"text-center\\\">\\n                There are no ellipses\\n              </td>\\n            </tr>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <td colspan=\\\"7\\\">\\n                <button class=\\\"btn btn-success float-right\\\" (click)=\\\"addNew()\\\">Add New ellipse</button>\\n              </td>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/ellipse/ellipse.component.html\n// module id = ../../../../../src/app/pages/ellipse/ellipse.component.html\n// module chunks = main","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\ninterface Ellipse {\n  height: number;\n  width: number;\n  color?: string;\n  x?: number;\n  y?: number;\n}\n\n@Component({\n  templateUrl: 'ellipse.component.html'\n})\nexport class EllipseComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  private ellipses: Ellipse[] = [{\n    height: 50,\n    width: 100,\n    color: 'rgba(125, 125, 32, 0.5)',\n    x: 20,\n    y: 30\n  }, {\n    height: 70,\n    width: 50,\n    color: 'rgba(12, 32, 222, 0.7)',\n    x: 100,\n    y: 20\n  }];\n\n  /**\n   * Creates ellipse component object instance.\n   */\n  constructor() { }\n\n  /**\n   * Adds new ellipse element.\n   */\n  addNew() {\n    this.ellipses.push({\n      height: 0,\n      width: 0,\n      color: '#000',\n      x: 0,\n      y: 0\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.ellipses.map(el => el.height * 2 + el.y)) + 20;\n  }\n\n  /**\n   * Removes specific ellipses element.\n   * @param index - Index of ellipse, which needs to be removed.\n   */\n  removeRow(index: number) {\n    this.ellipses.splice(index, 1);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/ellipse/ellipse.component.ts","module.exports = \"<!-- Header of the home -->\\n<div class=\\\"jumbotron jumbotron-fluid\\\">\\n  <div class=\\\"container\\\">\\n    <h1 class=\\\"display-4 text-center\\\">ngx-svg</h1>\\n    <p class=\\\"lead text-center\\\">Create powerful SVG objects with <a href=\\\"https://angular.io\\\" target=\\\"_blank\\\">Angular</a>. Based on <a href=\\\"http://svgjs.com\\\" target=\\\"_blank\\\">svg.js</a> library.</p>\\n  </div>\\n</div>\\n\\n<!-- Content of the home -->\\n<div class=\\\"row no-gutters\\\">\\n  <div class=\\\"col-12 col-sm-4 col-md-2\\\">\\n    <div class=\\\"nav flex-column\\\" role=\\\"tablist\\\" aria-orientation=\\\"vertical\\\">\\n      <a class=\\\"nav-link active\\\" data-toggle=\\\"pill\\\" href=\\\"#getting-started\\\" role=\\\"tab\\\" aria-controls=\\\"getting-started\\\" aria-selected=\\\"true\\\">Getting Started</a>\\n      <a class=\\\"nav-link\\\" data-toggle=\\\"pill\\\" href=\\\"#installation\\\" role=\\\"tab\\\" aria-controls=\\\"installation\\\" aria-selected=\\\"false\\\">Installation</a>\\n      <a class=\\\"nav-link\\\" data-toggle=\\\"pill\\\" href=\\\"#container\\\" role=\\\"tab\\\" aria-controls=\\\"container\\\" aria-selected=\\\"false\\\">Container</a>\\n      <a class=\\\"nav-link\\\" data-toggle=\\\"pill\\\" href=\\\"#line\\\" role=\\\"tab\\\" aria-controls=\\\"line\\\" aria-selected=\\\"false\\\">Line</a>\\n      <a class=\\\"nav-link\\\" data-toggle=\\\"pill\\\" href=\\\"#rectangular\\\" role=\\\"tab\\\" aria-controls=\\\"rectangular\\\" aria-selected=\\\"false\\\">Rectangular</a>\\n      <a class=\\\"nav-link\\\" data-toggle=\\\"pill\\\" href=\\\"#circle\\\" role=\\\"tab\\\" aria-controls=\\\"circle\\\" aria-selected=\\\"false\\\">Circle</a>\\n      <a class=\\\"nav-link\\\" data-toggle=\\\"pill\\\" href=\\\"#ellipse\\\" role=\\\"tab\\\" aria-controls=\\\"ellipse\\\" aria-selected=\\\"false\\\">Ellipse</a>\\n      <a class=\\\"nav-link\\\" data-toggle=\\\"pill\\\" href=\\\"#polyline\\\" role=\\\"tab\\\" aria-controls=\\\"polyline\\\" aria-selected=\\\"false\\\">Polyline</a>\\n      <a class=\\\"nav-link\\\" data-toggle=\\\"pill\\\" href=\\\"#polygon\\\" role=\\\"tab\\\" aria-controls=\\\"polygon\\\" aria-selected=\\\"false\\\">Polygon</a>\\n      <a class=\\\"nav-link\\\" data-toggle=\\\"pill\\\" href=\\\"#image\\\" role=\\\"tab\\\" aria-controls=\\\"image\\\" aria-selected=\\\"false\\\">Image</a>\\n      <a class=\\\"nav-link\\\" data-toggle=\\\"pill\\\" href=\\\"#text\\\" role=\\\"tab\\\" aria-controls=\\\"text\\\" aria-selected=\\\"false\\\">Text</a>\\n      <a class=\\\"nav-link\\\" data-toggle=\\\"pill\\\" href=\\\"#troubleshooting\\\" role=\\\"tab\\\" aria-controls=\\\"troubleshooting\\\" aria-selected=\\\"false\\\">Troubleshooting</a>\\n      <a class=\\\"nav-link\\\" data-toggle=\\\"pill\\\" href=\\\"#license\\\" role=\\\"tab\\\" aria-controls=\\\"license\\\" aria-selected=\\\"false\\\">License</a>\\n    </div>\\n  </div>\\n  <div class=\\\"col-12 col-sm-8 col-md-10\\\">\\n    <div class=\\\"tab-content\\\">\\n      <!-- Getting started tab -->\\n      <div class=\\\"tab-pane fade show active\\\" id=\\\"getting-started\\\" role=\\\"tabpanel\\\">\\n        <h2>Getting Started</h2>\\n        <p>ngx-svg contains all core svg.js components, so you won't need to include any other external dependencies.</p>\\n      </div>\\n\\n      <!-- Installation tab -->\\n      <div class=\\\"tab-pane fade\\\" id=\\\"installation\\\" role=\\\"tabpanel\\\">\\n        <h2>Installation</h2>\\n        <p>\\n          To install ngx-svg, you have to run the following command from the terminal (you have to be within the project folder) -\\n          <code>npm install ngx-svg --save</code>\\n        </p>\\n        <p>This will install the latest version of ngx-svg and add it to your project dependency list.</p>\\n        <p>\\n          After the installation you have to include the component in your module by importing it using the following command -\\n          <code>import {{ '{' }} NgxSvgModule {{ '}' }} from 'ngx-svg';</code>\\n        </p>\\n        <p>Finally you have to add the <code>NgxSvgModule</code> to the imports of your module: </p>\\n        <code>\\n          @NgModule({{ '{' }}<br />\\n            &emsp;declarations: [<br />\\n              &emsp;&emsp;...<br />\\n            &emsp;],<br />\\n            &emsp;imports: [<br />\\n              &emsp;&emsp;...<br />\\n              &emsp;&emsp;NgxSvgModule<br />\\n            &emsp;],<br />\\n            &emsp;providers: [..],<br />\\n            &emsp;bootstrap: [...]<br />\\n          {{ '}' }})<br />\\n          export class AppModule {{ '{' }} {{ '}' }}\\n        </code>\\n        <p></p>\\n        <p>Afterwards you should be able to use the library in your application.</p>\\n      </div>\\n\\n      <!-- Container tab -->\\n      <div class=\\\"tab-pane fade\\\" id=\\\"container\\\" role=\\\"tabpanel\\\">\\n        <h2>Container</h2>\\n        <p>\\n          To start using the ngx-svg you must declare a container object in one of your views, by using the following element:\\n        </p>\\n        <code>\\n          &lt;svg-container containerId=\\\"svg-element\\\"&gt;<br />\\n            &emsp;...<br />\\n          &lt;/svg-container&gt;\\n        </code>\\n        <p></p>\\n        <p>In the below table you can see explanation of the input and output parameters.</p>\\n        <table class=\\\"table table-responsive\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Name</th>\\n              <th>Type</th>\\n              <th>Explanation</th>\\n              <th>Mandatory</th>\\n              <th>Default value</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <tr>\\n              <td><b>1</b></td>\\n              <td>containerId</td>\\n              <td>Input parameter <code>(string)</code></td>\\n              <td>Unique ID for the svg container. Will be used for drawing the svg elements.</td>\\n              <td><b>YES</b></td>\\n              <td><code>undefined</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>2</b></td>\\n              <td>height</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Height of the container in pixels.</td>\\n              <td><b>NO</b></td>\\n              <td><code>200</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>3</b></td>\\n              <td>hoverable</td>\\n              <td>Input parameter <code>(boolean)</code></td>\\n              <td>Indicator if user should be able to see dot on hover, to capture coordinates.</td>\\n              <td><b>NO</b></td>\\n              <td><code>false</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>4</b></td>\\n              <td>showGrid</td>\\n              <td>Input parameter <code>(boolean)</code></td>\\n              <td>Indicator if grid image should be shown in the background of svg container.</td>\\n              <td><b>NO</b></td>\\n              <td><code>false</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>5</b></td>\\n              <td>pointSize</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Numeric value in pixels, to indicate how large should the point be.</td>\\n              <td><b>NO</b></td>\\n              <td><code>10</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>6</b></td>\\n              <td>viewBox</td>\\n              <td>Input parameter <code>(array of numbers)</code></td>\\n              <td>Viewbox of the container, must be an array consisting of 4 integers [x, y, width, height].</td>\\n              <td><b>NO</b></td>\\n              <td><code>[]</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>7</b></td>\\n              <td>clickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when click event happens on the dot element. Works only if <code>hoverable</code> input parameter is enabled.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>8</b></td>\\n              <td>doubleClickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when double click event happens on the dot element. Works only if <code>hoverable</code> input parameter is enabled.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n          </tbody>\\n        </table>\\n        <p>Within one container you can enter as many elements as you want.</p>\\n      </div>\\n\\n      <!-- Line tab -->\\n      <div class=\\\"tab-pane fade\\\" id=\\\"line\\\" role=\\\"tabpanel\\\">\\n        <h2>Line</h2>\\n        <p>\\n          To add a line element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\\n        </p>\\n        <code>\\n          &lt;svg-line&gt; &lt;/svg-line&gt;\\n        </code>\\n        <p></p>\\n        <p>In the below table you can see explanation of the input and output parameters for the line.</p>\\n        <table class=\\\"table table-responsive\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Name</th>\\n              <th>Type</th>\\n              <th>Explanation</th>\\n              <th>Mandatory</th>\\n              <th>Default value</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <tr>\\n              <td><b>1</b></td>\\n              <td>borderSize</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Numeric value with the size of the border.</td>\\n              <td><b>YES</b></td>\\n              <td><code>undefined</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>2</b></td>\\n              <td>borderColor</td>\\n              <td>Input parameter <code>(string)</code></td>\\n              <td>Color of the border (name, HEX, rgb).</td>\\n              <td><b>NO</b></td>\\n              <td><code>'#000'</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>3</b></td>\\n              <td>x0</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Starting point on the x axis.</td>\\n              <td><b>NO</b></td>\\n              <td><code>0</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>4</b></td>\\n              <td>y0</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Starting point on the y axis.</td>\\n              <td><b>NO</b></td>\\n              <td><code>0</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>5</b></td>\\n              <td>x1</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Ending point on the x axis.</td>\\n              <td><b>NO</b></td>\\n              <td><code>1</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>6</b></td>\\n              <td>y1</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Ending point on the y axis.</td>\\n              <td><b>NO</b></td>\\n              <td><code>1</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>7</b></td>\\n              <td>classes</td>\\n              <td>Input parameter <code>(array of strings)</code></td>\\n              <td>List of CSS classes which will be added.</td>\\n              <td><b>NO</b></td>\\n              <td><code>[]</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>8</b></td>\\n              <td>clickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when click event happens on the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>9</b></td>\\n              <td>doubleClickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when double click event happens on the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>10</b></td>\\n              <td>mouseOverEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when mouse is moved over the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>11</b></td>\\n              <td>MouseOutEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when mouse is moved out of the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n          </tbody>\\n        </table>\\n      </div>\\n\\n      <!-- Rectangular tab -->\\n      <div class=\\\"tab-pane fade\\\" id=\\\"rectangular\\\" role=\\\"tabpanel\\\">\\n        <h2>Rectangular</h2>\\n        <p>\\n          To add a rectangular element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\\n        </p>\\n        <code>\\n          &lt;svg-rect&gt; &lt;/svg-rect&gt;\\n        </code>\\n        <p></p>\\n        <p>In the below table you can see explanation of the input and output parameters for the rectangular.</p>\\n        <table class=\\\"table table-responsive\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Name</th>\\n              <th>Type</th>\\n              <th>Explanation</th>\\n              <th>Mandatory</th>\\n              <th>Default value</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <tr>\\n              <td><b>1</b></td>\\n              <td>height</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Height of the rectangular.</td>\\n              <td><b>YES</b></td>\\n              <td><code>undefined</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>2</b></td>\\n              <td>width</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Width of the rectangular.</td>\\n              <td><b>YES</b></td>\\n              <td><code>undefined</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>3</b></td>\\n              <td>color</td>\\n              <td>Input parameter <code>(string)</code></td>\\n              <td>Background color of the rectangular (name, HEX, rgb).</td>\\n              <td><b>NO</b></td>\\n              <td><code>'#000'</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>4</b></td>\\n              <td>x</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Starting point on the x axis.</td>\\n              <td><b>NO</b></td>\\n              <td><code>0</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>5</b></td>\\n              <td>y</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Starting point on the y axis.</td>\\n              <td><b>NO</b></td>\\n              <td><code>0</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>6</b></td>\\n              <td>classes</td>\\n              <td>Input parameter <code>(array of strings)</code></td>\\n              <td>List of CSS classes which will be added.</td>\\n              <td><b>NO</b></td>\\n              <td><code>[]</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>7</b></td>\\n              <td>clickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when click event happens on the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>8</b></td>\\n              <td>doubleClickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when double click event happens on the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>9</b></td>\\n              <td>mouseOverEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when mouse is moved over the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>10</b></td>\\n              <td>MouseOutEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when mouse is moved out of the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n          </tbody>\\n        </table>\\n      </div>\\n\\n      <!-- Circle tab -->\\n      <div class=\\\"tab-pane fade\\\" id=\\\"circle\\\" role=\\\"tabpanel\\\">\\n        <h2>Circle</h2>\\n        <p>\\n          To add a circle element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\\n        </p>\\n        <code>\\n          &lt;svg-circle&gt; &lt;/svg-circle&gt;\\n        </code>\\n        <p></p>\\n        <p>In the below table you can see explanation of the input and output parameters for the circle.</p>\\n        <table class=\\\"table table-responsive\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Name</th>\\n              <th>Type</th>\\n              <th>Explanation</th>\\n              <th>Mandatory</th>\\n              <th>Default value</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <tr>\\n              <td><b>1</b></td>\\n              <td>radius</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Radius of the circle.</td>\\n              <td><b>YES</b></td>\\n              <td><code>undefined</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>2</b></td>\\n              <td>color</td>\\n              <td>Input parameter <code>(string)</code></td>\\n              <td>Background color of the circle (name, HEX, rgb).</td>\\n              <td><b>NO</b></td>\\n              <td><code>'#000'</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>3</b></td>\\n              <td>x</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Starting point on the x axis.</td>\\n              <td><b>NO</b></td>\\n              <td><code>0</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>4</b></td>\\n              <td>y</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Starting point on the y axis.</td>\\n              <td><b>NO</b></td>\\n              <td><code>0</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>5</b></td>\\n              <td>classes</td>\\n              <td>Input parameter <code>(array of strings)</code></td>\\n              <td>List of CSS classes which will be added.</td>\\n              <td><b>NO</b></td>\\n              <td><code>[]</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>6</b></td>\\n              <td>clickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when click event happens on the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>7</b></td>\\n              <td>doubleClickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when double click event happens on the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>8</b></td>\\n              <td>mouseOverEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when mouse is moved over the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>9</b></td>\\n              <td>MouseOutEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when mouse is moved out of the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n          </tbody>\\n        </table>\\n      </div>\\n\\n      <!-- Ellipse tab -->\\n      <div class=\\\"tab-pane fade\\\" id=\\\"ellipse\\\" role=\\\"tabpanel\\\">\\n        <h2>Ellipse</h2>\\n        <p>\\n          To add a ellipse element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\\n        </p>\\n        <code>\\n          &lt;svg-ellipse&gt; &lt;/svg-ellipse&gt;\\n        </code>\\n        <p></p>\\n        <p>In the below table you can see explanation of the input and output parameters for the ellipse.</p>\\n        <table class=\\\"table table-responsive\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Name</th>\\n              <th>Type</th>\\n              <th>Explanation</th>\\n              <th>Mandatory</th>\\n              <th>Default value</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <tr>\\n              <td><b>1</b></td>\\n              <td>height</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Height of the ellipse.</td>\\n              <td><b>YES</b></td>\\n              <td><code>undefined</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>2</b></td>\\n              <td>width</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Width of the ellipse.</td>\\n              <td><b>YES</b></td>\\n              <td><code>undefined</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>3</b></td>\\n              <td>color</td>\\n              <td>Input parameter <code>(string)</code></td>\\n              <td>Background color of the ellipse (name, HEX, rgb).</td>\\n              <td><b>NO</b></td>\\n              <td><code>'#000'</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>4</b></td>\\n              <td>x</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Starting point on the x axis.</td>\\n              <td><b>NO</b></td>\\n              <td><code>0</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>5</b></td>\\n              <td>y</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Starting point on the y axis.</td>\\n              <td><b>NO</b></td>\\n              <td><code>0</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>6</b></td>\\n              <td>classes</td>\\n              <td>Input parameter <code>(array of strings)</code></td>\\n              <td>List of CSS classes which will be added.</td>\\n              <td><b>NO</b></td>\\n              <td><code>[]</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>7</b></td>\\n              <td>clickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when click event happens on the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>8</b></td>\\n              <td>doubleClickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when double click event happens on the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>9</b></td>\\n              <td>mouseOverEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when mouse is moved over the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>10</b></td>\\n              <td>MouseOutEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when mouse is moved out of the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n          </tbody>\\n        </table>\\n      </div>\\n\\n      <!-- Polyline tab -->\\n      <div class=\\\"tab-pane fade\\\" id=\\\"polyline\\\" role=\\\"tabpanel\\\">\\n        <h2>Polyline</h2>\\n        <p>\\n          To add a polyline element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\\n        </p>\\n        <code>\\n          &lt;svg-polyline&gt; &lt;/svg-polyline&gt;\\n        </code>\\n        <p></p>\\n        <p>In the below table you can see explanation of the input and output parameters for the polyline.</p>\\n        <table class=\\\"table table-responsive\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Name</th>\\n              <th>Type</th>\\n              <th>Explanation</th>\\n              <th>Mandatory</th>\\n              <th>Default value</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <tr>\\n              <td><b>1</b></td>\\n              <td>points</td>\\n              <td>Input parameter <code>(Array)</code></td>\\n              <td>Array with an array of x,y points. For example [[0, 50], [50, 100], [100, 50], [50, 0], [0, 50]].</td>\\n              <td><b>YES</b></td>\\n              <td><code>undefined</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>2</b></td>\\n              <td>borderSize</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Size of the border for the polyline.</td>\\n              <td><b>YES</b></td>\\n              <td><code>undefined</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>3</b></td>\\n              <td>borderColor</td>\\n              <td>Input parameter <code>(string)</code></td>\\n              <td>Border color of the polyline (name, HEX, rgb).</td>\\n              <td><b>NO</b></td>\\n              <td><code>'#000'</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>4</b></td>\\n              <td>fill</td>\\n              <td>Input parameter <code>(string)</code></td>\\n              <td>Fill color of the polyline (name, HEX, rgb).</td>\\n              <td><b>NO</b></td>\\n              <td><code>'#000'</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>5</b></td>\\n              <td>classes</td>\\n              <td>Input parameter <code>(array of strings)</code></td>\\n              <td>List of CSS classes which will be added.</td>\\n              <td><b>NO</b></td>\\n              <td><code>[]</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>6</b></td>\\n              <td>clickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when click event happens on the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>7</b></td>\\n              <td>doubleClickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when double click event happens on the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>8</b></td>\\n              <td>mouseOverEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when mouse is moved over the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>9</b></td>\\n              <td>MouseOutEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when mouse is moved out of the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n          </tbody>\\n        </table>\\n      </div>\\n\\n      <!-- Polygon tab -->\\n      <div class=\\\"tab-pane fade\\\" id=\\\"polygon\\\" role=\\\"tabpanel\\\">\\n        <h2>Polygon</h2>\\n        <p>\\n          To add a polygon element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\\n        </p>\\n        <code>\\n          &lt;svg-polygon&gt; &lt;/svg-polygon&gt;\\n        </code>\\n        <p></p>\\n        <p>In the below table you can see explanation of the input and output parameters for the polygon.</p>\\n        <table class=\\\"table table-responsive\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Name</th>\\n              <th>Type</th>\\n              <th>Explanation</th>\\n              <th>Mandatory</th>\\n              <th>Default value</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <tr>\\n              <td><b>1</b></td>\\n              <td>points</td>\\n              <td>Input parameter <code>(Array)</code></td>\\n              <td>Array with an array of x,y points. For example [[0, 50], [50, 100], [100, 50], [50, 0], [0, 50]].</td>\\n              <td><b>YES</b></td>\\n              <td><code>undefined</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>2</b></td>\\n              <td>borderSize</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Size of the border for the polygon.</td>\\n              <td><b>YES</b></td>\\n              <td><code>undefined</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>3</b></td>\\n              <td>borderColor</td>\\n              <td>Input parameter <code>(string)</code></td>\\n              <td>Border color of the polygon (name, HEX, rgb).</td>\\n              <td><b>NO</b></td>\\n              <td><code>'#000'</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>4</b></td>\\n              <td>fill</td>\\n              <td>Input parameter <code>(string)</code></td>\\n              <td>Fill color of the polygon (name, HEX, rgb).</td>\\n              <td><b>NO</b></td>\\n              <td><code>'#000'</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>5</b></td>\\n              <td>classes</td>\\n              <td>Input parameter <code>(array of strings)</code></td>\\n              <td>List of CSS classes which will be added.</td>\\n              <td><b>NO</b></td>\\n              <td><code>[]</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>6</b></td>\\n              <td>clickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when click event happens on the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>7</b></td>\\n              <td>doubleClickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when double click event happens on the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>8</b></td>\\n              <td>mouseOverEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when mouse is moved over the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>9</b></td>\\n              <td>MouseOutEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when mouse is moved out of the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n          </tbody>\\n        </table>\\n      </div>\\n\\n      <!-- Image tab -->\\n      <div class=\\\"tab-pane fade\\\" id=\\\"image\\\" role=\\\"tabpanel\\\">\\n        <h2>Image</h2>\\n        <p>\\n          To add a image element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\\n        </p>\\n        <code>\\n          &lt;svg-image&gt; &lt;/svg-image&gt;\\n        </code>\\n        <p></p>\\n        <p>In the below table you can see explanation of the input and output parameters for the image.</p>\\n        <table class=\\\"table table-responsive\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Name</th>\\n              <th>Type</th>\\n              <th>Explanation</th>\\n              <th>Mandatory</th>\\n              <th>Default value</th>\\n            </tr>\\n          </thead>\\n        \\n          <tbody>\\n            <tr>\\n              <td><b>1</b></td>\\n              <td>imageUrl</td>\\n              <td>Input parameter <code>(string)</code></td>\\n              <td>Path to the image for SVG image.</td>\\n              <td><b>YES</b></td>\\n              <td><code>undefined</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>2</b></td>\\n              <td>x</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Starting point on x axis.</td>\\n              <td><b>NO</b></td>\\n              <td><code>0</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>3</b></td>\\n              <td>y</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Starting point on y axis.</td>\\n              <td><b>NO</b></td>\\n              <td><code>0</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>4</b></td>\\n              <td>height</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Height of the image.</td>\\n              <td><b>NO</b></td>\\n              <td><code>100</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>5</b></td>\\n              <td>width</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Width of the image.</td>\\n              <td><b>NO</b></td>\\n              <td><code>100</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>6</b></td>\\n              <td>classes</td>\\n              <td>Input parameter <code>(array of strings)</code></td>\\n              <td>List of CSS classes which will be added.</td>\\n              <td><b>NO</b></td>\\n              <td><code>[]</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>7</b></td>\\n              <td>clickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when click event happens on the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>8</b></td>\\n              <td>doubleClickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when double click event happens on the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>9</b></td>\\n              <td>mouseOverEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when mouse is moved over the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>10</b></td>\\n              <td>MouseOutEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when mouse is moved out of the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n          </tbody>\\n        </table>\\n      </div>\\n\\n      <!-- Text tab -->\\n      <div class=\\\"tab-pane fade\\\" id=\\\"text\\\" role=\\\"tabpanel\\\">\\n        <h2>Text</h2>\\n        <p>\\n          To add a text element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\\n        </p>\\n        <code>\\n          &lt;svg-text&gt; &lt;/svg-text&gt;\\n        </code>\\n        <p></p>\\n        <p>In the below table you can see explanation of the input and output parameters for the text.</p>\\n        <table class=\\\"table table-responsive\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Name</th>\\n              <th>Type</th>\\n              <th>Explanation</th>\\n              <th>Mandatory</th>\\n              <th>Default value</th>\\n            </tr>\\n          </thead>\\n        \\n          <tbody>\\n            <tr>\\n              <td><b>1</b></td>\\n              <td>text</td>\\n              <td>Input parameter <code>(string)</code></td>\\n              <td>Text that will be set for the element.</td>\\n              <td><b>YES</b></td>\\n              <td><code>undefined</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>2</b></td>\\n              <td>color</td>\\n              <td>Input parameter <code>(string)</code></td>\\n              <td>Color of the text.</td>\\n              <td><b>NO</b></td>\\n              <td><code>'#000'</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>3</b></td>\\n              <td>x</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Starting point on x axis.</td>\\n              <td><b>NO</b></td>\\n              <td><code>0</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>4</b></td>\\n              <td>y</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Starting point on y axis.</td>\\n              <td><b>NO</b></td>\\n              <td><code>0</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>5</b></td>\\n              <td>size</td>\\n              <td>Input parameter <code>(number)</code></td>\\n              <td>Size of the text.</td>\\n              <td><b>NO</b></td>\\n              <td><code>10</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>6</b></td>\\n              <td>classes</td>\\n              <td>Input parameter <code>(array of strings)</code></td>\\n              <td>List of CSS classes which will be added.</td>\\n              <td><b>NO</b></td>\\n              <td><code>[]</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>7</b></td>\\n              <td>clickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when click event happens on the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>8</b></td>\\n              <td>doubleClickEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when double click event happens on the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>9</b></td>\\n              <td>mouseOverEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when mouse is moved over the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n            <tr>\\n              <td><b>10</b></td>\\n              <td>MouseOutEvent</td>\\n              <td>Output parameter <code>(MouseEvent)</code></td>\\n              <td>Is fired when mouse is moved out of the element.</td>\\n              <td><b>NO</b></td>\\n              <td><code>N/A</code></td>\\n            </tr>\\n          </tbody>\\n        </table>\\n      </div>\\n\\n      <!-- Troubleshooting tab -->\\n      <div class=\\\"tab-pane fade\\\" id=\\\"troubleshooting\\\" role=\\\"tabpanel\\\">\\n        <h2>Troubleshooting</h2>\\n        <p>In case of any questions or issues, please open a new question / issue on our <a href=\\\"https://github.com/vvaldersteins/ngx-svg/issues\\\" target=\\\"_blank\\\">GitHub repository</a>.</p>\\n      </div>\\n\\n      <!-- License tab -->\\n      <div class=\\\"tab-pane fade\\\" id=\\\"license\\\" role=\\\"tabpanel\\\">\\n        <h2>License</h2>\\n        <p>ngx-svg is developed under MIT license.</p>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/home/home.component.html\n// module id = ../../../../../src/app/pages/home/home.component.html\n// module chunks = main","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\n@Component({\n  templateUrl: 'home.component.html'\n})\nexport class HomeComponent {\n  /**\n   * Creates home component object instance.\n   */\n  constructor() { }\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/home/home.component.ts","module.exports = \"<!-- Header of the image -->\\n<div class=\\\"jumbotron jumbotron-fluid\\\">\\n  <div class=\\\"container\\\">\\n    <h1 class=\\\"display-4 text-center\\\">Image</h1>\\n  </div>\\n</div>\\n\\n<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row no-gutters\\\">\\n    <div class=\\\"col-12\\\">\\n      <!-- Svg Container with images -->\\n      <svg-container containerId=\\\"image\\\" [height]=\\\"getHeight()\\\">\\n        <svg-image [imageUrl]=\\\"image.imageUrl\\\" [height]=\\\"image.height\\\" [width]=\\\"image.width\\\"\\n          [x]=\\\"image.x\\\" [y]=\\\"image.y\\\" *ngFor=\\\"let image of images\\\"></svg-image>\\n      </svg-container>\\n    </div>\\n\\n    <div class=\\\"col-12\\\">\\n      <!-- Svg Image configuration -->\\n      <div class=\\\"table-responsive\\\">\\n        <table class=\\\"table\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Image URL</th>\\n              <th>X position</th>\\n              <th>Y position</th>\\n              <th>Width</th>\\n              <th>Height</th>\\n              <th>Actions</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"images.length > 0\\\">\\n              <tr *ngFor=\\\"let image of images; let index = index;\\\">\\n                <td class=\\\"align-middle\\\">\\n                  <b>{{ index + 1 }}</b>\\n                </td>\\n                <td>\\n                  <input type=\\\"string\\\" [(ngModel)]=\\\"image.imageUrl\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"image.x\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"image.y\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"image.width\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"image.height\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <button class=\\\"btn btn-danger\\\" (click)=\\\"removeRow(index)\\\">Remove</button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <tr *ngIf=\\\"images.length === 0\\\">\\n              <td colspan=\\\"7\\\" class=\\\"text-center\\\">\\n                There are no images\\n              </td>\\n            </tr>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <td colspan=\\\"7\\\">\\n                <button class=\\\"btn btn-success float-right\\\" (click)=\\\"addNew()\\\">Add New image</button>\\n              </td>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/image/image.component.html\n// module id = ../../../../../src/app/pages/image/image.component.html\n// module chunks = main","/**\n * Import Angular libraries.\n */\nimport { Component, ChangeDetectorRef } from '@angular/core';\n\ninterface Image {\n  imageUrl: string;\n  x?: number;\n  y?: number;\n  width?: number;\n  height?: number;\n}\n\n@Component({\n  templateUrl: 'image.component.html'\n})\nexport class ImageComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  private images: Image[] = [{\n    imageUrl: 'ngx-svg/assets/dog.png',\n    x: 100,\n    y: 100,\n    width: 100,\n    height: 100\n  }];\n\n  /**\n   * Creates image component object instance.\n   */\n  constructor(\n    private cdRef: ChangeDetectorRef\n  ) { }\n\n  onClick(event) { console.log(event); }\n\n  /**\n   * Adds new image element.\n   */\n  addNew() {\n    this.images.push({\n      imageUrl: 'ngx-svg/assets/dog.png',\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 100\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.images.map(el => el.height + el.y)) + 20;\n  }\n\n  /**\n   * Removes specific image element.\n   * @param index - Index of image, which needs to be removed.\n   */\n  removeRow(index: number) {\n    this.images.splice(index, 1);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/image/image.component.ts","module.exports = \"<!-- Header of the line -->\\n<div class=\\\"jumbotron jumbotron-fluid\\\">\\n  <div class=\\\"container\\\">\\n    <h1 class=\\\"display-4 text-center\\\">Line</h1>\\n  </div>\\n</div>\\n\\n<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row no-gutters\\\">\\n    <div class=\\\"col-12\\\">\\n      <!-- Svg Container with lines -->\\n      <svg-container containerId=\\\"line\\\" [height]=\\\"getHeight()\\\">\\n        <svg-line [borderSize]=\\\"line.borderSize\\\" [borderColor]=\\\"line.borderColor\\\"\\n          [x0]=\\\"line.x0\\\" [y0]=\\\"line.y0\\\" [x1]=\\\"line.x1\\\" [y1]=\\\"line.y1\\\" *ngFor=\\\"let line of lines\\\"></svg-line>\\n      </svg-container>\\n    </div>\\n\\n    <div class=\\\"col-12\\\">\\n      <!-- Svg line configuration -->\\n      <div class=\\\"table-responsive\\\">\\n        <table class=\\\"table\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Border Size</th>\\n              <th>Border Color</th>\\n              <th>X Start position</th>\\n              <th>Y Start position</th>\\n              <th>X End position</th>\\n              <th>Y End position</th>\\n              <th>Actions</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"lines.length > 0\\\">\\n              <tr *ngFor=\\\"let line of lines; let index = index;\\\">\\n                <td class=\\\"align-middle\\\">\\n                  <b>{{ index + 1 }}</b>\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"line.borderSize\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"string\\\" [(ngModel)]=\\\"line.borderColor\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"line.x0\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"line.y0\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"line.x1\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"line.y1\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <button class=\\\"btn btn-danger\\\" (click)=\\\"removeRow(index)\\\">Remove</button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <tr *ngIf=\\\"lines.length === 0\\\">\\n              <td colspan=\\\"8\\\" class=\\\"text-center\\\">\\n                There are no lines\\n              </td>\\n            </tr>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <td colspan=\\\"8\\\">\\n                <button class=\\\"btn btn-success float-right\\\" (click)=\\\"addNew()\\\">Add New line</button>\\n              </td>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/line/line.component.html\n// module id = ../../../../../src/app/pages/line/line.component.html\n// module chunks = main","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\ninterface Line {\n  borderSize: number;\n  borderColor?: string;\n  x0?: number;\n  y0?: number;\n  x1?: number;\n  y1?: number;\n}\n\n@Component({\n  templateUrl: 'line.component.html'\n})\nexport class LineComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  private lines: Line[] = [{\n    borderSize: 10,\n    borderColor: 'rgba(125, 125, 32, 0.5)',\n    x0: 20,\n    y0: 30,\n    x1: 55,\n    y1: 85\n  }, {\n    borderSize: 10,\n    borderColor: 'rgba(12, 32, 222, 0.7)',\n    x0: 30,\n    y0: 20,\n    x1: 85,\n    y1: 55\n  }, {\n    borderSize: 10,\n    borderColor: 'rgba(18, 52, 23, 0.7)',\n    x0: 20,\n    y0: 60,\n    x1: 50,\n    y1: 20\n  }];\n\n  /**\n   * Creates line component object instance.\n   */\n  constructor() { }\n\n  /**\n   * Adds new line element.\n   */\n  addNew() {\n    this.lines.push({\n      borderSize: 0,\n      borderColor: '#000',\n      x0: 0,\n      y0: 0,\n      x1: 1,\n      y1: 1\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.lines.map(el => {\n      if (el.y0 > el.y1) {\n        return el.y0;\n      } else {\n        return el.y1;\n      }\n    })) + 20;\n  }\n\n  /**\n   * Removes specific line element.\n   * @param index - Index of a line which needs to be removed.\n   */\n  removeRow(index: number) {\n    this.lines.splice(index, 1);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/line/line.component.ts","module.exports = \"<!-- Header of the polygon -->\\n<div class=\\\"jumbotron jumbotron-fluid\\\">\\n  <div class=\\\"container\\\">\\n    <h1 class=\\\"display-4 text-center\\\">Polygon</h1>\\n  </div>\\n</div>\\n\\n<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row no-gutters\\\">\\n    <div class=\\\"col-12\\\">\\n      <!-- Svg Container with lines -->\\n      <svg-container containerId=\\\"polygon\\\" [height]=\\\"getHeight()\\\">\\n        <svg-polygon [borderSize]=\\\"polygon.borderSize\\\" [borderColor]=\\\"polygon.borderColor\\\"\\n          [fill]=\\\"polygon.fill\\\" [points]=\\\"polygon.points\\\" *ngFor=\\\"let polygon of polygons\\\"></svg-polygon>\\n      </svg-container>\\n    </div>\\n\\n    <div class=\\\"col-12\\\">\\n      <!-- Svg line configuration -->\\n      <div class=\\\"table-responsive\\\">\\n        <table class=\\\"table\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Border Size</th>\\n              <th>Border Color</th>\\n              <th>Fill Color</th>\\n              <th class=\\\"text-center\\\">Points</th>\\n              <th>Actions</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"polygons.length > 0\\\">\\n              <tr *ngFor=\\\"let polygon of polygons; let index = index;\\\">\\n                <td class=\\\"align-middle\\\">\\n                  <b>{{ index + 1 }}</b>\\n                </td>\\n                <td class=\\\"align-middle\\\">\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"polygon.borderSize\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td class=\\\"align-middle\\\">\\n                  <input type=\\\"string\\\" [(ngModel)]=\\\"polygon.borderColor\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td class=\\\"align-middle\\\">\\n                  <input type=\\\"string\\\" [(ngModel)]=\\\"polygon.fill\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <tr>\\n                    <th>X point</th>\\n                    <th>Y point</th>\\n                    <th>Actions</th>\\n                  </tr>\\n\\n                  <ng-container *ngIf=\\\"polygon.points.length > 0\\\">\\n                    <tr *ngFor=\\\"let point of polygon.points; let pointIndex = index;\\\">\\n                      <td>\\n                        <input type=\\\"number\\\" [(ngModel)]=\\\"point[0]\\\" class=\\\"form-control\\\" />\\n                      </td>\\n                      <td>\\n                        <input type=\\\"number\\\" [(ngModel)]=\\\"point[1]\\\" class=\\\"form-control\\\" />\\n                      </td>\\n                      <td>\\n                        <button class=\\\"btn btn-danger\\\" (click)=\\\"removePoint(polygon, pointIndex)\\\">Remove</button>\\n                      </td>\\n                    </tr>\\n                  </ng-container>\\n\\n                  <tr *ngIf=\\\"polygon.points.length === 0\\\">\\n                    <td colspan=\\\"3\\\">\\n                      There are no points for this polygon\\n                    </td>\\n                  </tr>\\n\\n                  <tr>\\n                    <td colspan=\\\"3\\\">\\n                      <button class=\\\"btn btn-success float-right\\\" (click)=\\\"addNewPoint(polygon)\\\">Add New Point</button>\\n                    </td>\\n                  </tr>\\n                </td>\\n                <td class=\\\"align-middle\\\">\\n                  <button class=\\\"btn btn-danger\\\" (click)=\\\"removeRow(index)\\\">Remove</button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <tr *ngIf=\\\"polygons.length === 0\\\">\\n              <td colspan=\\\"6\\\" class=\\\"text-center\\\">\\n                There are no polygons\\n              </td>\\n            </tr>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <td colspan=\\\"6\\\">\\n                <button class=\\\"btn btn-success float-right\\\" (click)=\\\"addNew()\\\">Add New polygon</button>\\n              </td>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/polygon/polygon.component.html\n// module id = ../../../../../src/app/pages/polygon/polygon.component.html\n// module chunks = main","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\ninterface Polygon {\n  borderSize: number;\n  borderColor?: string;\n  fill?: string;\n  points: number[][];\n}\n\n@Component({\n  templateUrl: 'polygon.component.html'\n})\nexport class PolygonComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  private polygons: Polygon[] = [{\n    borderSize: 2,\n    borderColor: 'rgba(125, 125, 32, 0.5)',\n    fill: 'rgba(100, 100, 20, 0.2)',\n    points: [[10, 100], [100, 100], [100, 10], [10, 10]]\n  }, {\n    borderSize: 3,\n    borderColor: 'rgba(23, 25, 255, 1)',\n    fill: 'rgba(0, 0, 0, 0)',\n    points: [[200, 150], [210, 190], [250, 200], [210, 210], [200, 250], [190, 210], [150, 200], [190, 190]]\n  }];\n\n  /**\n   * Creates polygon component object instance.\n   */\n  constructor() { }\n\n  /**\n   * Adds new polygon element.\n   */\n  addNew() {\n    this.polygons.push({\n      borderSize: 0,\n      borderColor: '#000',\n      points: [[]]\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.polygons.map(el => {\n      let maxValue;\n      const max = Math.max.apply(Math, el.points.map(point => {\n        if (maxValue === undefined || (maxValue !== undefined && point[1] > maxValue)) {\n          maxValue = point[1];\n        }\n\n        return maxValue;\n      }));\n\n      return max;\n    })) + 20;\n  }\n\n  /**\n   * Adds new points element at the end of the list.\n   * @param polygon - Polygon object for which to add new points element.\n   */\n  addNewPoint(polygon: Polygon) {\n    polygon.points.push([]);\n  }\n\n  /**\n   * Removes a specific point from the points list.\n   * @param polygon - Polygon object for which point needs to be removed.\n   * @param index - Index which needs to be removed.\n   */\n  removePoint(polygon: Polygon, index: number) {\n    polygon.points.splice(index, 1);\n  }\n\n  /**\n   * Removes specific polygon element.\n   * @param index - Index which needs to be removed\n   */\n  removeRow(index: number) {\n    this.polygons.splice(index, 1);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/polygon/polygon.component.ts","module.exports = \"<!-- Header of the polyline -->\\n<div class=\\\"jumbotron jumbotron-fluid\\\">\\n  <div class=\\\"container\\\">\\n    <h1 class=\\\"display-4 text-center\\\">Polyline</h1>\\n  </div>\\n</div>\\n\\n<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row no-gutters\\\">\\n    <div class=\\\"col-12\\\">\\n      <!-- Svg Container with lines -->\\n      <svg-container containerId=\\\"polyline\\\" [height]=\\\"getHeight()\\\">\\n        <svg-polyline [borderSize]=\\\"polyline.borderSize\\\" [borderColor]=\\\"polyline.borderColor\\\"\\n          [fill]=\\\"polyline.fill\\\" [points]=\\\"polyline.points\\\" *ngFor=\\\"let polyline of polylines\\\"></svg-polyline>\\n      </svg-container>\\n    </div>\\n\\n    <div class=\\\"col-12\\\">\\n      <!-- Svg line configuration -->\\n      <div class=\\\"table-responsive\\\">\\n        <table class=\\\"table\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Border Size</th>\\n              <th>Border Color</th>\\n              <th>Fill Color</th>\\n              <th class=\\\"text-center\\\">Points</th>\\n              <th>Actions</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"polylines.length > 0\\\">\\n              <tr *ngFor=\\\"let polyline of polylines; let index = index;\\\">\\n                <td class=\\\"align-middle\\\">\\n                  <b>{{ index + 1 }}</b>\\n                </td>\\n                <td class=\\\"align-middle\\\">\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"polyline.borderSize\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td class=\\\"align-middle\\\">\\n                  <input type=\\\"string\\\" [(ngModel)]=\\\"polyline.borderColor\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td class=\\\"align-middle\\\">\\n                  <input type=\\\"string\\\" [(ngModel)]=\\\"polyline.fill\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <tr>\\n                    <th>X point</th>\\n                    <th>Y point</th>\\n                    <th>Actions</th>\\n                  </tr>\\n\\n                  <ng-container *ngIf=\\\"polyline.points.length > 0\\\">\\n                    <tr *ngFor=\\\"let point of polyline.points; let pointIndex = index;\\\">\\n                      <td>\\n                        <input type=\\\"number\\\" [(ngModel)]=\\\"point[0]\\\" class=\\\"form-control\\\" />\\n                      </td>\\n                      <td>\\n                        <input type=\\\"number\\\" [(ngModel)]=\\\"point[1]\\\" class=\\\"form-control\\\" />\\n                      </td>\\n                      <td>\\n                        <button class=\\\"btn btn-danger\\\" (click)=\\\"removePoint(polyline, pointIndex)\\\">Remove</button>\\n                      </td>\\n                    </tr>\\n                  </ng-container>\\n\\n                  <tr *ngIf=\\\"polyline.points.length === 0\\\">\\n                    <td colspan=\\\"3\\\">\\n                      There are no points for this polyline\\n                    </td>\\n                  </tr>\\n\\n                  <tr>\\n                    <td colspan=\\\"3\\\">\\n                      <button class=\\\"btn btn-success float-right\\\" (click)=\\\"addNewPoint(polyline)\\\">Add New Point</button>\\n                    </td>\\n                  </tr>\\n                </td>\\n                <td class=\\\"align-middle\\\">\\n                  <button class=\\\"btn btn-danger\\\" (click)=\\\"removeRow(index)\\\">Remove</button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <tr *ngIf=\\\"polylines.length === 0\\\">\\n              <td colspan=\\\"6\\\" class=\\\"text-center\\\">\\n                There are no polylines\\n              </td>\\n            </tr>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <td colspan=\\\"6\\\">\\n                <button class=\\\"btn btn-success float-right\\\" (click)=\\\"addNew()\\\">Add New polyline</button>\\n              </td>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/polyline/polyline.component.html\n// module id = ../../../../../src/app/pages/polyline/polyline.component.html\n// module chunks = main","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\ninterface Polyline {\n  borderSize: number;\n  borderColor?: string;\n  fill?: string;\n  points: number[][];\n}\n\n@Component({\n  templateUrl: 'polyline.component.html'\n})\nexport class PolylineComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  private polylines: Polyline[] = [{\n    borderSize: 2,\n    borderColor: 'rgba(125, 125, 32, 0.5)',\n    fill: 'rgba(100, 100, 20, 0.2)',\n    points: [[10, 100], [100, 100], [100, 10], [10, 10], [10, 100]]\n  }, {\n    borderSize: 3,\n    borderColor: 'rgba(23, 25, 255, 1)',\n    fill: 'rgba(0, 0, 0, 0)',\n    points: [[200, 150], [210, 190], [250, 200], [210, 210], [200, 250], [190, 210], [150, 200], [190, 190]]\n  }];\n\n  /**\n   * Creates polyline component object instance.\n   */\n  constructor() { }\n\n  /**\n   * Adds new polyline element.\n   */\n  addNew() {\n    this.polylines.push({\n      borderSize: 0,\n      borderColor: '#000',\n      points: [[]]\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.polylines.map(el => {\n      let maxValue;\n      const max = Math.max.apply(Math, el.points.map(point => {\n        if (maxValue === undefined || (maxValue !== undefined && point[1] > maxValue)) {\n          maxValue = point[1];\n        }\n\n        return maxValue;\n      }));\n\n      return max;\n    })) + 20;\n  }\n\n  /**\n   * Adds new points element at the end of the list.\n   * @param polyline - Polyline object for which to add new points element.\n   */\n  addNewPoint(polyline: Polyline) {\n    polyline.points.push([]);\n  }\n\n  /**\n   * Removes a specific point from the points list.\n   * @param polyline - Polyline object for which point needs to be removed.\n   * @param index - Index which needs to be removed.\n   */\n  removePoint(polyline: Polyline, index: number) {\n    polyline.points.splice(index, 1);\n  }\n\n  /**\n   * Removes specific polyline element.\n   * @param index - Index which needs to be removed\n   */\n  removeRow(index: number) {\n    this.polylines.splice(index, 1);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/polyline/polyline.component.ts","module.exports = \"<!-- Header of the rectangular -->\\n<div class=\\\"jumbotron jumbotron-fluid\\\">\\n  <div class=\\\"container\\\">\\n    <h1 class=\\\"display-4 text-center\\\">Rectangular</h1>\\n  </div>\\n</div>\\n\\n<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row no-gutters\\\">\\n    <div class=\\\"col-12\\\">\\n      <!-- Svg Container with rectangulars -->\\n      <svg-container containerId=\\\"rectangular\\\" [height]=\\\"getHeight()\\\">\\n        <svg-rect [height]=\\\"rectangular.height\\\" [width]=\\\"rectangular.width\\\" [color]=\\\"rectangular.color\\\"\\n          [x]=\\\"rectangular.x\\\" [y]=\\\"rectangular.y\\\" *ngFor=\\\"let rectangular of rectangulars\\\"></svg-rect>\\n      </svg-container>\\n    </div>\\n\\n    <div class=\\\"col-12\\\">\\n      <!-- Svg Rect configuration -->\\n      <div class=\\\"table-responsive\\\">\\n        <table class=\\\"table\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Height</th>\\n              <th>Width</th>\\n              <th>Color</th>\\n              <th>X position</th>\\n              <th>Y position</th>\\n              <th>Actions</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"rectangulars.length > 0\\\">\\n              <tr *ngFor=\\\"let rectangular of rectangulars; let index = index;\\\">\\n                <td class=\\\"align-middle\\\">\\n                  <b>{{ index + 1 }}</b>\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"rectangular.height\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"rectangular.width\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"string\\\" [(ngModel)]=\\\"rectangular.color\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"rectangular.x\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"rectangular.y\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <button class=\\\"btn btn-danger\\\" (click)=\\\"removeRow(index)\\\">Remove</button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <tr *ngIf=\\\"rectangulars.length === 0\\\">\\n              <td colspan=\\\"7\\\" class=\\\"text-center\\\">\\n                There are no rectangulars\\n              </td>\\n            </tr>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <td colspan=\\\"7\\\">\\n                <button class=\\\"btn btn-success float-right\\\" (click)=\\\"addNew()\\\">Add New Rectangular</button>\\n              </td>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/rect/rect.component.html\n// module id = ../../../../../src/app/pages/rect/rect.component.html\n// module chunks = main","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\ninterface Rectangular {\n  height: number;\n  width: number;\n  color?: string;\n  x?: number;\n  y?: number;\n}\n\n@Component({\n  templateUrl: 'rect.component.html'\n})\nexport class RectComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  private rectangulars: Rectangular[] = [{\n    height: 100,\n    width: 200,\n    color: 'rgba(125, 125, 32, 0.5)',\n    x: 20,\n    y: 30\n  }, {\n    height: 50,\n    width: 50,\n    color: 'rgba(12, 32, 222, 0.7)',\n    x: 200,\n    y: 20\n  }];\n\n  /**\n   * Creates rect component object instance.\n   */\n  constructor() { }\n\n  /**\n   * Adds new rectangular element.\n   */\n  addNew() {\n    this.rectangulars.push({\n      height: 0,\n      width: 0,\n      color: '#000',\n      x: 0,\n      y: 0\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.rectangulars.map(el => el.height + el.y)) + 20;\n  }\n\n  /**\n   * Removes specific rectangular element.\n   * @param index - Index of rectangular element, which needs to be removed.\n   */\n  removeRow(index: number) {\n    this.rectangulars.splice(index, 1);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/rect/rect.component.ts","module.exports = \"<!-- Header of the text -->\\n<div class=\\\"jumbotron jumbotron-fluid\\\">\\n  <div class=\\\"container\\\">\\n    <h1 class=\\\"display-4 text-center\\\">Text</h1>\\n  </div>\\n</div>\\n\\n<div class=\\\"container-fluid\\\">\\n  <div class=\\\"row no-gutters\\\">\\n    <div class=\\\"col-12\\\">\\n      <!-- Svg Container with texts -->\\n      <svg-container containerId=\\\"text\\\" [height]=\\\"getHeight()\\\">\\n        <svg-text [size]=\\\"text.size\\\" [text]=\\\"text.text\\\" [color]=\\\"text.color\\\"\\n          [x]=\\\"text.x\\\" [y]=\\\"text.y\\\" *ngFor=\\\"let text of texts\\\"></svg-text>\\n      </svg-container>\\n    </div>\\n\\n    <div class=\\\"col-12\\\">\\n      <!-- Svg Text configuration -->\\n      <div class=\\\"table-responsive\\\">\\n        <table class=\\\"table\\\">\\n          <thead>\\n            <tr>\\n              <th>ID</th>\\n              <th>Text</th>\\n              <th>Color</th>\\n              <th>Size</th>\\n              <th>X position</th>\\n              <th>Y position</th>\\n              <th>Actions</th>\\n            </tr>\\n          </thead>\\n          <tbody>\\n            <ng-container *ngIf=\\\"texts.length > 0\\\">\\n              <tr *ngFor=\\\"let text of texts; let index = index;\\\">\\n                <td class=\\\"align-middle\\\">\\n                  <b>{{ index + 1 }}</b>\\n                </td>\\n                <td>\\n                  <input type=\\\"string\\\" [(ngModel)]=\\\"text.text\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"string\\\" [(ngModel)]=\\\"text.color\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"text.size\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"text.x\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <input type=\\\"number\\\" [(ngModel)]=\\\"text.y\\\" class=\\\"form-control\\\" />\\n                </td>\\n                <td>\\n                  <button class=\\\"btn btn-danger\\\" (click)=\\\"removeRow(index)\\\">Remove</button>\\n                </td>\\n              </tr>\\n            </ng-container>\\n            <tr *ngIf=\\\"texts.length === 0\\\">\\n              <td colspan=\\\"7\\\" class=\\\"text-center\\\">\\n                There are no texts\\n              </td>\\n            </tr>\\n          </tbody>\\n          <tfoot>\\n            <tr>\\n              <td colspan=\\\"7\\\">\\n                <button class=\\\"btn btn-success float-right\\\" (click)=\\\"addNew()\\\">Add New Text</button>\\n              </td>\\n            </tr>\\n          </tfoot>\\n        </table>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/text/text.component.html\n// module id = ../../../../../src/app/pages/text/text.component.html\n// module chunks = main","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\ninterface Text {\n  text: string;\n  size?: number;\n  color?: string;\n  x?: number;\n  y?: number;\n}\n\n@Component({\n  templateUrl: 'text.component.html'\n})\nexport class TextComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  private texts: Text[] = [{\n    text: 'Wow! This is awesome text with an opacity!',\n    size: 30,\n    color: 'rgba(125, 125, 32, 0.5)',\n    x: 20,\n    y: 30\n  }, {\n    text: 'Texts can have different sizes, positions and colors!',\n    size: 10,\n    color: 'rgba(12, 32, 222, 0.7)',\n    x: 200,\n    y: 80\n  }];\n\n  /**\n   * Creates text component object instance.\n   */\n  constructor() { }\n\n  /**\n   * Adds new text element.\n   */\n  addNew() {\n    this.texts.push({\n      text: '',\n      size: 10,\n      color: '#000',\n      x: 0,\n      y: 0\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.texts.map(el => el.y)) + 20;\n  }\n\n  /**\n   * Removes specific text element.\n   * @param index - Index of text element, which needs to be removed.\n   */\n  removeRow(index: number) {\n    this.texts.splice(index, 1);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/app/pages/text/text.component.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// /home/vvaldersteins/Documents/solid-themes/vvaldersteins.github.io/ngx-svg-code/src/main.ts"],"sourceRoot":"webpack:///"}