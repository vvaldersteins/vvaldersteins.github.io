{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/header/header.component.ts","webpack:///src/app/components/header/header.component.html","webpack:///src/app/pages/circle/circle.component.ts","webpack:///src/app/pages/circle/circle.component.html","webpack:///src/app/pages/ellipse/ellipse.component.ts","webpack:///src/app/pages/ellipse/ellipse.component.html","webpack:///src/app/pages/grid/grid.component.ts","webpack:///src/app/pages/grid/grid.component.html","webpack:///src/app/pages/home/home.component.ts","webpack:///src/app/pages/home/home.component.html","webpack:///src/app/pages/image/image.component.ts","webpack:///src/app/pages/image/image.component.html","webpack:///src/app/pages/line/line.component.ts","webpack:///src/app/pages/line/line.component.html","webpack:///src/app/pages/path/path.component.ts","webpack:///src/app/pages/path/path.component.html","webpack:///src/app/pages/polygon/polygon.component.ts","webpack:///src/app/pages/polygon/polygon.component.html","webpack:///src/app/pages/polyline/polyline.component.ts","webpack:///src/app/pages/polyline/polyline.component.html","webpack:///src/app/pages/rect/rect.component.ts","webpack:///src/app/pages/rect/rect.component.html","webpack:///src/app/pages/text/text.component.ts","webpack:///src/app/pages/text/text.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","selector","templateUrl","styleUrls","routes","path","component","pathMatch","redirectTo","AppModule","forRoot","declarations","imports","providers","bootstrap","HeaderComponent","CircleComponent","circles","radius","color","x","y","push","Math","max","apply","map","el","index","splice","addNew","EllipseComponent","ellipses","height","width","GridComponent","showGrid","grid","strokeColor","Object","assign","updateGrid","HomeComponent","ImageComponent","images","imageUrl","LineComponent","lines","borderSize","borderColor","x0","y0","x1","y1","PathComponent","paths","fill","replace","split","filter","element","PolygonComponent","polygons","points","maxValue","point","undefined","polygon","PolylineComponent","polylines","polyline","RectComponent","rectangulars","TextComponent","texts","text","size","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'ngx-svg-demo';\n}\n","<!-- App Header -->\n<app-header></app-header>\n\n<!-- Router content -->\n<router-outlet></router-outlet>","/**\n * Import Angular libraries.\n */\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouterModule, Routes } from '@angular/router';\nimport { FormsModule } from '@angular/forms';\nimport { NgModule } from '@angular/core';\n\n/**\n * Import third-party libraries.\n */\nimport { NgxSvgModule } from 'ngx-svg';\n\n/**\n * Import custom components.\n */\nimport { AppComponent } from './app.component';\nimport { HeaderComponent } from './components/header/header.component';\n\n/**\n * Import custom pages.\n */\nimport { HomeComponent } from './pages/home/home.component';\nimport { RectComponent } from './pages/rect/rect.component';\nimport { CircleComponent } from './pages/circle/circle.component';\nimport { LineComponent } from './pages/line/line.component';\nimport { EllipseComponent } from './pages/ellipse/ellipse.component';\nimport { PolylineComponent } from './pages/polyline/polyline.component';\nimport { PolygonComponent } from './pages/polygon/polygon.component';\nimport { ImageComponent } from './pages/image/image.component';\nimport { PathComponent } from './pages/path/path.component';\nimport { TextComponent } from './pages/text/text.component';\nimport { GridComponent } from './pages/grid/grid.component';\n\n/**\n * Define page routes.\n */\nconst routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'rect', component: RectComponent },\n  { path: 'circle', component: CircleComponent },\n  { path: 'line', component: LineComponent },\n  { path: 'ellipse', component: EllipseComponent },\n  { path: 'polyline', component: PolylineComponent },\n  { path: 'polygon', component: PolygonComponent },\n  { path: 'image', component: ImageComponent },\n  { path: 'path', component: PathComponent },\n  { path: 'text', component: TextComponent },\n  { path: 'grid', component: GridComponent },\n  { path: '', pathMatch: 'full', redirectTo: '/home' }\n];\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    HeaderComponent,\n    HomeComponent,\n    RectComponent,\n    CircleComponent,\n    LineComponent,\n    EllipseComponent,\n    PolylineComponent,\n    PolygonComponent,\n    ImageComponent,\n    PathComponent,\n    TextComponent,\n    GridComponent\n  ],\n  imports: [\n    BrowserModule,\n    RouterModule.forRoot(\n      routes\n    ),\n    NgxSvgModule,\n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: 'header.component.html'\n})\nexport class HeaderComponent {\n  /**\n   * Does all required pre-requisites and creates header component instance.\n   */\n  constructor() { }\n}\n","<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n  <a class=\"navbar-brand\" routerLink=\"/\">\n    ngx-svg <small class=\"extra-small\"><i>v1.0.1</i></small>\n  </a>\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#main-navigation\" aria-controls=\"main-navigation\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n  <div class=\"collapse navbar-collapse\" id=\"main-navigation\">\n    <ul class=\"navbar-nav mr-auto\">\n      <li class=\"nav-item\" routerLinkActive=\"active\">\n        <a class=\"nav-link\" routerLink=\"/home\">Home</a>\n      </li>\n      <li class=\"nav-item\" routerLinkActive=\"active\">\n        <a class=\"nav-link\" routerLink=\"/rect\">Rect</a>\n      </li>\n      <li class=\"nav-item\" routerLinkActive=\"active\">\n        <a class=\"nav-link\" routerLink=\"/circle\">Circle</a>\n      </li>\n      <li class=\"nav-item\" routerLinkActive=\"active\">\n        <a class=\"nav-link\" routerLink=\"/ellipse\">Ellipse</a>\n      </li>\n      <li class=\"nav-item\" routerLinkActive=\"active\">\n        <a class=\"nav-link\" routerLink=\"/line\">Line</a>\n      </li>\n      <li class=\"nav-item\" routerLinkActive=\"active\">\n        <a class=\"nav-link\" routerLink=\"/polyline\">Polyline</a>\n      </li>\n      <li class=\"nav-item\" routerLinkActive=\"active\">\n        <a class=\"nav-link\" routerLink=\"/polygon\">Polygon</a>\n      </li>\n      <li class=\"nav-item\" routerLinkActive=\"active\">\n        <a class=\"nav-link\" routerLink=\"/image\">Image</a>\n      </li>\n      <li class=\"nav-item\" routerLinkActive=\"active\">\n        <a class=\"nav-link\" routerLink=\"/path\">Path</a>\n      </li>\n      <li class=\"nav-item\" routerLinkActive=\"active\">\n        <a class=\"nav-link\" routerLink=\"/text\">Text</a>\n      </li>\n      <li class=\"nav-item\" routerLinkActive=\"active\">\n        <a class=\"nav-link\" routerLink=\"/grid\">Grid</a>\n      </li>\n    </ul>\n    <a class=\"btn btn-dark\" href=\"https://github.com/vvaldersteins/ngx-svg\" target=\"_blank\"><i class=\"fab fa-github\"></i> GitHub</a>\n    <a class=\"btn btn-dark\" href=\"https://www.npmjs.com/package/ngx-svg\" target=\"_blank\"><i class=\"fab fa-npm\"></i> NPM</a>\n  </div>\n</nav>","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\ninterface Circle {\n  radius: number;\n  color?: string;\n  x?: number;\n  y?: number;\n}\n\n@Component({\n  templateUrl: 'circle.component.html'\n})\nexport class CircleComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  public circles: Circle[] = [{\n    radius: 45,\n    color: 'rgba(125, 125, 32, 0.5)',\n    x: 20,\n    y: 30\n  }, {\n    radius: 30,\n    color: 'rgba(12, 32, 222, 0.7)',\n    x: 70,\n    y: 30\n  }];\n\n  /**\n   * Creates circle component object instance.\n   */\n  constructor() { }\n\n  /**\n   * Adds new circle element.\n   */\n  addNew() {\n    this.circles.push({\n      radius: 0,\n      color: '#000',\n      x: 0,\n      y: 0\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.circles.map(el => el.radius * 2 + el.y)) + 20;\n  }\n\n  /**\n   * Removes specific circle element.\n   * @param index - Index of circle, which needs to be removed.\n   */\n  removeRow(index: number) {\n    this.circles.splice(index, 1);\n  }\n}\n","<!-- Header of the circle -->\n<div class=\"jumbotron jumbotron-fluid\">\n  <div class=\"container\">\n    <h1 class=\"display-4 text-center\">Circle</h1>\n  </div>\n</div>\n\n<div class=\"container-fluid\">\n  <div class=\"row no-gutters\">\n    <div class=\"col-12\">\n      <!-- Svg Container with circles -->\n      <svg-container containerId=\"circle\" [height]=\"getHeight()\">\n        <svg-circle [radius]=\"circle.radius\" [color]=\"circle.color\"\n          [x]=\"circle.x\" [y]=\"circle.y\" *ngFor=\"let circle of circles\"></svg-circle>\n      </svg-container>\n    </div>\n\n    <div class=\"col-12\">\n      <!-- Svg Circle configuration -->\n      <div class=\"table-responsive\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Radius</th>\n              <th>Color</th>\n              <th>X position</th>\n              <th>Y position</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <ng-container *ngIf=\"circles.length > 0\">\n              <tr *ngFor=\"let circle of circles; let index = index;\">\n                <td class=\"align-middle\">\n                  <b>{{ index + 1 }}</b>\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"circle.radius\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"string\" [(ngModel)]=\"circle.color\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"circle.x\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"circle.y\" class=\"form-control\" />\n                </td>\n                <td>\n                  <button class=\"btn btn-danger\" (click)=\"removeRow(index)\">Remove</button>\n                </td>\n              </tr>\n            </ng-container>\n            <tr *ngIf=\"circles.length === 0\">\n              <td colspan=\"6\" class=\"text-center\">\n                There are no circles\n              </td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <tr>\n              <td colspan=\"6\">\n                <button class=\"btn btn-success float-right\" (click)=\"addNew()\">Add New circle</button>\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n    </div>\n  </div>\n</div>","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\ninterface Ellipse {\n  height: number;\n  width: number;\n  color?: string;\n  x?: number;\n  y?: number;\n}\n\n@Component({\n  templateUrl: 'ellipse.component.html'\n})\nexport class EllipseComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  public ellipses: Ellipse[] = [{\n    height: 50,\n    width: 100,\n    color: 'rgba(125, 125, 32, 0.5)',\n    x: 20,\n    y: 30\n  }, {\n    height: 70,\n    width: 50,\n    color: 'rgba(12, 32, 222, 0.7)',\n    x: 100,\n    y: 20\n  }];\n\n  /**\n   * Creates ellipse component object instance.\n   */\n  constructor() { }\n\n  /**\n   * Adds new ellipse element.\n   */\n  addNew() {\n    this.ellipses.push({\n      height: 0,\n      width: 0,\n      color: '#000',\n      x: 0,\n      y: 0\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.ellipses.map(el => el.height * 2 + el.y)) + 20;\n  }\n\n  /**\n   * Removes specific ellipses element.\n   * @param index - Index of ellipse, which needs to be removed.\n   */\n  removeRow(index: number) {\n    this.ellipses.splice(index, 1);\n  }\n}\n","<!-- Header of the ellipse -->\n<div class=\"jumbotron jumbotron-fluid\">\n  <div class=\"container\">\n    <h1 class=\"display-4 text-center\">Ellipse</h1>\n  </div>\n</div>\n\n<div class=\"container-fluid\">\n  <div class=\"row no-gutters\">\n    <div class=\"col-12\">\n      <!-- Svg Container with ellipses -->\n      <svg-container containerId=\"ellipse\" [height]=\"getHeight()\">\n        <svg-ellipse [height]=\"ellipse.height\" [width]=\"ellipse.width\" [color]=\"ellipse.color\"\n          [x]=\"ellipse.x\" [y]=\"ellipse.y\" *ngFor=\"let ellipse of ellipses\"></svg-ellipse>\n      </svg-container>\n    </div>\n\n    <div class=\"col-12\">\n      <!-- Svg Ellipse configuration -->\n      <div class=\"table-responsive\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Height</th>\n              <th>Width</th>\n              <th>Color</th>\n              <th>X position</th>\n              <th>Y position</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <ng-container *ngIf=\"ellipses.length > 0\">\n              <tr *ngFor=\"let ellipse of ellipses; let index = index;\">\n                <td class=\"align-middle\">\n                  <b>{{ index + 1 }}</b>\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"ellipse.height\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"ellipse.width\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"string\" [(ngModel)]=\"ellipse.color\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"ellipse.x\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"ellipse.y\" class=\"form-control\" />\n                </td>\n                <td>\n                  <button class=\"btn btn-danger\" (click)=\"removeRow(index)\">Remove</button>\n                </td>\n              </tr>\n            </ng-container>\n            <tr *ngIf=\"ellipses.length === 0\">\n              <td colspan=\"7\" class=\"text-center\">\n                There are no ellipses\n              </td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <tr>\n              <td colspan=\"7\">\n                <button class=\"btn btn-success float-right\" (click)=\"addNew()\">Add New ellipse</button>\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n    </div>\n  </div>\n</div>","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\ninterface Grid {\n  width: number;\n  height: number;\n  strokeColor: string;\n}\n\n@Component({\n  templateUrl: 'grid.component.html'\n})\nexport class GridComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  public showGrid = true;\n  public grid: Grid = {\n    width: 10,\n    height: 10,\n    strokeColor: '#000'\n  };\n\n  /**\n   * Creates grid component object instance.\n   */\n  constructor() { }\n\n  /**\n   * Does all required pre-requisites and updates the grid object.\n   */\n  updateGrid() {\n    this.grid = Object.assign({}, this.grid);\n  }\n}\n","<!-- Header of the grid -->\n<div class=\"jumbotron jumbotron-fluid\">\n  <div class=\"container\">\n    <h1 class=\"display-4 text-center\">Grid</h1>\n  </div>\n</div>\n\n<div class=\"container-fluid\">\n  <div class=\"row no-gutters\">\n    <div class=\"col-12\">\n      <!-- Svg Container with grid -->\n      <svg-container containerId=\"grid\" [showGrid]=\"showGrid\" [grid]=\"grid\">\n      </svg-container>\n    </div>\n\n    <div class=\"col-12\">\n      <!-- Svg grid configuration section -->\n      <label>Display grid</label>\n      <input type=\"checkbox\" [(ngModel)]=\"showGrid\" class=\"form-control\" />\n\n      <label>Grid box width</label>\n      <input type=\"number\" [(ngModel)]=\"grid.width\" (change)=\"updateGrid()\" class=\"form-control\" />\n\n      <label>Grid box height</label>\n      <input type=\"number\" [(ngModel)]=\"grid.height\" (change)=\"updateGrid()\" class=\"form-control\" />\n\n      <label>Grid box stroke color</label>\n      <input type=\"string\" [(ngModel)]=\"grid.strokeColor\" (change)=\"updateGrid()\" class=\"form-control\" />\n\n      <button class=\"btn btn-primary mt-3\" (click)=\"updateGrid()\">Update Grid</button>\n    </div>\n  </div>\n</div>","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\n@Component({\n  templateUrl: 'home.component.html'\n})\nexport class HomeComponent {\n  /**\n   * Creates home component object instance.\n   */\n  constructor() { }\n}\n","<!-- Header of the home -->\n<div class=\"jumbotron jumbotron-fluid\">\n  <div class=\"container\">\n    <h1 class=\"display-4 text-center\">ngx-svg</h1>\n    <p class=\"lead text-center\">Create powerful SVG objects with <a href=\"https://angular.io\" target=\"_blank\">Angular</a>. Based on <a href=\"http://svgjs.com\" target=\"_blank\">svg.js</a> library.</p>\n  </div>\n</div>\n\n<!-- Content of the home -->\n<div class=\"row no-gutters\">\n  <div class=\"col-12 col-sm-4 col-md-2\">\n    <div class=\"nav flex-column\" role=\"tablist\" aria-orientation=\"vertical\">\n      <a class=\"nav-link active\" data-toggle=\"pill\" href=\"#getting-started\" role=\"tab\" aria-controls=\"getting-started\" aria-selected=\"true\">Getting Started</a>\n      <a class=\"nav-link\" data-toggle=\"pill\" href=\"#installation\" role=\"tab\" aria-controls=\"installation\" aria-selected=\"false\">Installation</a>\n      <a class=\"nav-link\" data-toggle=\"pill\" href=\"#container\" role=\"tab\" aria-controls=\"container\" aria-selected=\"false\">Container</a>\n      <a class=\"nav-link\" data-toggle=\"pill\" href=\"#line\" role=\"tab\" aria-controls=\"line\" aria-selected=\"false\">Line</a>\n      <a class=\"nav-link\" data-toggle=\"pill\" href=\"#rectangular\" role=\"tab\" aria-controls=\"rectangular\" aria-selected=\"false\">Rectangular</a>\n      <a class=\"nav-link\" data-toggle=\"pill\" href=\"#circle\" role=\"tab\" aria-controls=\"circle\" aria-selected=\"false\">Circle</a>\n      <a class=\"nav-link\" data-toggle=\"pill\" href=\"#ellipse\" role=\"tab\" aria-controls=\"ellipse\" aria-selected=\"false\">Ellipse</a>\n      <a class=\"nav-link\" data-toggle=\"pill\" href=\"#polyline\" role=\"tab\" aria-controls=\"polyline\" aria-selected=\"false\">Polyline</a>\n      <a class=\"nav-link\" data-toggle=\"pill\" href=\"#polygon\" role=\"tab\" aria-controls=\"polygon\" aria-selected=\"false\">Polygon</a>\n      <a class=\"nav-link\" data-toggle=\"pill\" href=\"#image\" role=\"tab\" aria-controls=\"image\" aria-selected=\"false\">Image</a>\n      <a class=\"nav-link\" data-toggle=\"pill\" href=\"#path\" role=\"tab\" aria-controls=\"path\" aria-selected=\"false\">Path</a>\n      <a class=\"nav-link\" data-toggle=\"pill\" href=\"#text\" role=\"tab\" aria-controls=\"text\" aria-selected=\"false\">Text</a>\n      <a class=\"nav-link\" data-toggle=\"pill\" href=\"#classes\" role=\"tab\" aria-controls=\"text\" aria-selected=\"false\">Custom CSS Classes</a>\n      <a class=\"nav-link\" data-toggle=\"pill\" href=\"#troubleshooting\" role=\"tab\" aria-controls=\"troubleshooting\" aria-selected=\"false\">Troubleshooting</a>\n      <a class=\"nav-link\" data-toggle=\"pill\" href=\"#license\" role=\"tab\" aria-controls=\"license\" aria-selected=\"false\">License</a>\n    </div>\n  </div>\n  <div class=\"col-12 col-sm-8 col-md-10\">\n    <div class=\"tab-content\">\n      <!-- Getting started tab -->\n      <div class=\"tab-pane fade show active\" id=\"getting-started\" role=\"tabpanel\">\n        <h2>Getting Started</h2>\n        <p>ngx-svg contains all core svg.js components, so you won't need to include any other external dependencies.</p>\n      </div>\n\n      <!-- Installation tab -->\n      <div class=\"tab-pane fade\" id=\"installation\" role=\"tabpanel\">\n        <h2>Installation</h2>\n        <p>\n          To install ngx-svg, you have to run the following command from the terminal (you have to be within the project folder) -\n          <code>npm install ngx-svg --save</code>\n        </p>\n        <p>This will install the latest version of ngx-svg and add it to your project dependency list.</p>\n        <p>\n          After the installation you have to include the component in your module by importing it using the following command -\n          <code>import {{ '{' }} NgxSvgModule {{ '}' }} from 'ngx-svg';</code>\n        </p>\n        <p>Finally you have to add the <code>NgxSvgModule</code> to the imports of your module: </p>\n        <code>\n          @NgModule({{ '{' }}<br />\n            &emsp;declarations: [<br />\n              &emsp;&emsp;...<br />\n            &emsp;],<br />\n            &emsp;imports: [<br />\n              &emsp;&emsp;...<br />\n              &emsp;&emsp;NgxSvgModule<br />\n            &emsp;],<br />\n            &emsp;providers: [..],<br />\n            &emsp;bootstrap: [...]<br />\n          {{ '}' }})<br />\n          export class AppModule {{ '{' }} {{ '}' }}\n        </code>\n        <p></p>\n        <p>Afterwards you should be able to use the library in your application.</p>\n      </div>\n\n      <!-- Container tab -->\n      <div class=\"tab-pane fade\" id=\"container\" role=\"tabpanel\">\n        <h2>Container</h2>\n        <p>\n          To start using the ngx-svg you must declare a container object in one of your views, by using the following element:\n        </p>\n        <code>\n          &lt;svg-container containerId=\"svg-element\"&gt;<br />\n            &emsp;...<br />\n          &lt;/svg-container&gt;\n        </code>\n        <p></p>\n        <p>In the below table you can see explanation of the input and output parameters.</p>\n        <table class=\"table table-responsive\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Explanation</th>\n              <th>Mandatory</th>\n              <th>Default value</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td><b>1</b></td>\n              <td>containerId</td>\n              <td>Input parameter <code>(string)</code></td>\n              <td>Unique ID for the svg container. Will be used for drawing the svg elements.</td>\n              <td><b>YES</b></td>\n              <td><code>undefined</code></td>\n            </tr>\n            <tr>\n              <td><b>2</b></td>\n              <td>height</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Height of the container in pixels.</td>\n              <td><b>NO</b></td>\n              <td><code>200</code></td>\n            </tr>\n            <tr>\n              <td><b>3</b></td>\n              <td>hoverable</td>\n              <td>Input parameter <code>(boolean)</code></td>\n              <td>Indicator if user should be able to see dot on hover, to capture coordinates.</td>\n              <td><b>NO</b></td>\n              <td><code>false</code></td>\n            </tr>\n            <tr>\n              <td><b>4</b></td>\n              <td>showGrid</td>\n              <td>Input parameter <code>(boolean)</code></td>\n              <td>Indicator if grid should be shown in the background of svg container.</td>\n              <td><b>NO</b></td>\n              <td><code>false</code></td>\n            </tr>\n            <tr>\n              <td><b>5</b></td>\n              <td>grid</td>\n              <td>Input parameter <code>(width: number, height: number, color: string)</code></td>\n              <td>Grid object that will be used to configure grid.</td>\n              <td><b>NO</b></td>\n              <td><code>&#123; width: 10, height: 10, color: #000 &#125;</code></td>\n            </tr>\n            <tr>\n              <td><b>6</b></td>\n              <td>pointSize</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Numeric value in pixels, to indicate how large should the point be.</td>\n              <td><b>NO</b></td>\n              <td><code>10</code></td>\n            </tr>\n            <tr>\n              <td><b>7</b></td>\n              <td>viewBox</td>\n              <td>Input parameter <code>(array of numbers)</code></td>\n              <td>Viewbox of the container, must be an array consisting of 4 integers [x, y, width, height].</td>\n              <td><b>NO</b></td>\n              <td><code>[]</code></td>\n            </tr>\n            <tr>\n              <td><b>8</b></td>\n              <td>clickEvent</td>\n              <td>Output parameter <code>(x: number, y: number)</code></td>\n              <td>Is fired when click event happens on the dot element. Works only if <code>hoverable</code> input parameter is enabled.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>9</b></td>\n              <td>doubleClickEvent</td>\n              <td>Output parameter <code>(x: number, y: number)</code></td>\n              <td>Is fired when double click event happens on the dot element. Works only if <code>hoverable</code> input parameter is enabled.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>10</b></td>\n              <td>mouseOverEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved over the container.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>11</b></td>\n              <td>mouseOutEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse exits the container area.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>12</b></td>\n              <td>mouseMoveEvent</td>\n              <td>Output parameter <code>(x: number, y: number)</code></td>\n              <td>Is fired when mouse moves within the container area.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n          </tbody>\n        </table>\n        <p>Within one container you can enter as many elements as you want.</p>\n      </div>\n\n      <!-- Line tab -->\n      <div class=\"tab-pane fade\" id=\"line\" role=\"tabpanel\">\n        <h2>Line</h2>\n        <p>\n          To add a line element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\n        </p>\n        <code>\n          &lt;svg-line&gt; &lt;/svg-line&gt;\n        </code>\n        <p></p>\n        <p>In the below table you can see explanation of the input and output parameters for the line.</p>\n        <table class=\"table table-responsive\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Explanation</th>\n              <th>Mandatory</th>\n              <th>Default value</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td><b>1</b></td>\n              <td>borderSize</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Numeric value with the size of the border.</td>\n              <td><b>YES</b></td>\n              <td><code>undefined</code></td>\n            </tr>\n            <tr>\n              <td><b>2</b></td>\n              <td>borderColor</td>\n              <td>Input parameter <code>(string)</code></td>\n              <td>Color of the border (name, HEX, rgb).</td>\n              <td><b>NO</b></td>\n              <td><code>'#000'</code></td>\n            </tr>\n            <tr>\n              <td><b>3</b></td>\n              <td>x0</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Starting point on the x axis.</td>\n              <td><b>NO</b></td>\n              <td><code>0</code></td>\n            </tr>\n            <tr>\n              <td><b>4</b></td>\n              <td>y0</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Starting point on the y axis.</td>\n              <td><b>NO</b></td>\n              <td><code>0</code></td>\n            </tr>\n            <tr>\n              <td><b>5</b></td>\n              <td>x1</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Ending point on the x axis.</td>\n              <td><b>NO</b></td>\n              <td><code>1</code></td>\n            </tr>\n            <tr>\n              <td><b>6</b></td>\n              <td>y1</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Ending point on the y axis.</td>\n              <td><b>NO</b></td>\n              <td><code>1</code></td>\n            </tr>\n            <tr>\n              <td><b>7</b></td>\n              <td>classes</td>\n              <td>Input parameter <code>(array of strings)</code></td>\n              <td>List of CSS classes which will be added.</td>\n              <td><b>NO</b></td>\n              <td><code>[]</code></td>\n            </tr>\n            <tr>\n              <td><b>8</b></td>\n              <td>clickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>9</b></td>\n              <td>doubleClickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when double click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>10</b></td>\n              <td>mouseOverEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved over the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>11</b></td>\n              <td>MouseOutEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved out of the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <!-- Rectangular tab -->\n      <div class=\"tab-pane fade\" id=\"rectangular\" role=\"tabpanel\">\n        <h2>Rectangular</h2>\n        <p>\n          To add a rectangular element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\n        </p>\n        <code>\n          &lt;svg-rect&gt; &lt;/svg-rect&gt;\n        </code>\n        <p></p>\n        <p>In the below table you can see explanation of the input and output parameters for the rectangular.</p>\n        <table class=\"table table-responsive\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Explanation</th>\n              <th>Mandatory</th>\n              <th>Default value</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td><b>1</b></td>\n              <td>height</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Height of the rectangular.</td>\n              <td><b>YES</b></td>\n              <td><code>undefined</code></td>\n            </tr>\n            <tr>\n              <td><b>2</b></td>\n              <td>width</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Width of the rectangular.</td>\n              <td><b>YES</b></td>\n              <td><code>undefined</code></td>\n            </tr>\n            <tr>\n              <td><b>3</b></td>\n              <td>color</td>\n              <td>Input parameter <code>(string)</code></td>\n              <td>Background color of the rectangular (name, HEX, rgb).</td>\n              <td><b>NO</b></td>\n              <td><code>'#000'</code></td>\n            </tr>\n            <tr>\n              <td><b>4</b></td>\n              <td>x</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Starting point on the x axis.</td>\n              <td><b>NO</b></td>\n              <td><code>0</code></td>\n            </tr>\n            <tr>\n              <td><b>5</b></td>\n              <td>y</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Starting point on the y axis.</td>\n              <td><b>NO</b></td>\n              <td><code>0</code></td>\n            </tr>\n            <tr>\n              <td><b>6</b></td>\n              <td>classes</td>\n              <td>Input parameter <code>(array of strings)</code></td>\n              <td>List of CSS classes which will be added.</td>\n              <td><b>NO</b></td>\n              <td><code>[]</code></td>\n            </tr>\n            <tr>\n              <td><b>7</b></td>\n              <td>clickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>8</b></td>\n              <td>doubleClickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when double click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>9</b></td>\n              <td>mouseOverEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved over the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>10</b></td>\n              <td>MouseOutEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved out of the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <!-- Circle tab -->\n      <div class=\"tab-pane fade\" id=\"circle\" role=\"tabpanel\">\n        <h2>Circle</h2>\n        <p>\n          To add a circle element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\n        </p>\n        <code>\n          &lt;svg-circle&gt; &lt;/svg-circle&gt;\n        </code>\n        <p></p>\n        <p>In the below table you can see explanation of the input and output parameters for the circle.</p>\n        <table class=\"table table-responsive\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Explanation</th>\n              <th>Mandatory</th>\n              <th>Default value</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td><b>1</b></td>\n              <td>radius</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Radius of the circle.</td>\n              <td><b>YES</b></td>\n              <td><code>undefined</code></td>\n            </tr>\n            <tr>\n              <td><b>2</b></td>\n              <td>color</td>\n              <td>Input parameter <code>(string)</code></td>\n              <td>Background color of the circle (name, HEX, rgb).</td>\n              <td><b>NO</b></td>\n              <td><code>'#000'</code></td>\n            </tr>\n            <tr>\n              <td><b>3</b></td>\n              <td>x</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Starting point on the x axis.</td>\n              <td><b>NO</b></td>\n              <td><code>0</code></td>\n            </tr>\n            <tr>\n              <td><b>4</b></td>\n              <td>y</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Starting point on the y axis.</td>\n              <td><b>NO</b></td>\n              <td><code>0</code></td>\n            </tr>\n            <tr>\n              <td><b>5</b></td>\n              <td>classes</td>\n              <td>Input parameter <code>(array of strings)</code></td>\n              <td>List of CSS classes which will be added.</td>\n              <td><b>NO</b></td>\n              <td><code>[]</code></td>\n            </tr>\n            <tr>\n              <td><b>6</b></td>\n              <td>clickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>7</b></td>\n              <td>doubleClickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when double click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>8</b></td>\n              <td>mouseOverEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved over the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>9</b></td>\n              <td>MouseOutEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved out of the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <!-- Ellipse tab -->\n      <div class=\"tab-pane fade\" id=\"ellipse\" role=\"tabpanel\">\n        <h2>Ellipse</h2>\n        <p>\n          To add a ellipse element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\n        </p>\n        <code>\n          &lt;svg-ellipse&gt; &lt;/svg-ellipse&gt;\n        </code>\n        <p></p>\n        <p>In the below table you can see explanation of the input and output parameters for the ellipse.</p>\n        <table class=\"table table-responsive\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Explanation</th>\n              <th>Mandatory</th>\n              <th>Default value</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td><b>1</b></td>\n              <td>height</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Height of the ellipse.</td>\n              <td><b>YES</b></td>\n              <td><code>undefined</code></td>\n            </tr>\n            <tr>\n              <td><b>2</b></td>\n              <td>width</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Width of the ellipse.</td>\n              <td><b>YES</b></td>\n              <td><code>undefined</code></td>\n            </tr>\n            <tr>\n              <td><b>3</b></td>\n              <td>color</td>\n              <td>Input parameter <code>(string)</code></td>\n              <td>Background color of the ellipse (name, HEX, rgb).</td>\n              <td><b>NO</b></td>\n              <td><code>'#000'</code></td>\n            </tr>\n            <tr>\n              <td><b>4</b></td>\n              <td>x</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Starting point on the x axis.</td>\n              <td><b>NO</b></td>\n              <td><code>0</code></td>\n            </tr>\n            <tr>\n              <td><b>5</b></td>\n              <td>y</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Starting point on the y axis.</td>\n              <td><b>NO</b></td>\n              <td><code>0</code></td>\n            </tr>\n            <tr>\n              <td><b>6</b></td>\n              <td>classes</td>\n              <td>Input parameter <code>(array of strings)</code></td>\n              <td>List of CSS classes which will be added.</td>\n              <td><b>NO</b></td>\n              <td><code>[]</code></td>\n            </tr>\n            <tr>\n              <td><b>7</b></td>\n              <td>clickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>8</b></td>\n              <td>doubleClickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when double click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>9</b></td>\n              <td>mouseOverEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved over the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>10</b></td>\n              <td>MouseOutEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved out of the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <!-- Polyline tab -->\n      <div class=\"tab-pane fade\" id=\"polyline\" role=\"tabpanel\">\n        <h2>Polyline</h2>\n        <p>\n          To add a polyline element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\n        </p>\n        <code>\n          &lt;svg-polyline&gt; &lt;/svg-polyline&gt;\n        </code>\n        <p></p>\n        <p>In the below table you can see explanation of the input and output parameters for the polyline.</p>\n        <table class=\"table table-responsive\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Explanation</th>\n              <th>Mandatory</th>\n              <th>Default value</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td><b>1</b></td>\n              <td>points</td>\n              <td>Input parameter <code>(Array)</code></td>\n              <td>Array with an array of x,y points. For example [[0, 50], [50, 100], [100, 50], [50, 0], [0, 50]].</td>\n              <td><b>YES</b></td>\n              <td><code>undefined</code></td>\n            </tr>\n            <tr>\n              <td><b>2</b></td>\n              <td>borderSize</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Size of the border for the polyline.</td>\n              <td><b>YES</b></td>\n              <td><code>undefined</code></td>\n            </tr>\n            <tr>\n              <td><b>3</b></td>\n              <td>borderColor</td>\n              <td>Input parameter <code>(string)</code></td>\n              <td>Border color of the polyline (name, HEX, rgb).</td>\n              <td><b>NO</b></td>\n              <td><code>'#000'</code></td>\n            </tr>\n            <tr>\n              <td><b>4</b></td>\n              <td>fill</td>\n              <td>Input parameter <code>(string)</code></td>\n              <td>Fill color of the polyline (name, HEX, rgb).</td>\n              <td><b>NO</b></td>\n              <td><code>'#000'</code></td>\n            </tr>\n            <tr>\n              <td><b>5</b></td>\n              <td>classes</td>\n              <td>Input parameter <code>(array of strings)</code></td>\n              <td>List of CSS classes which will be added.</td>\n              <td><b>NO</b></td>\n              <td><code>[]</code></td>\n            </tr>\n            <tr>\n              <td><b>6</b></td>\n              <td>clickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>7</b></td>\n              <td>doubleClickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when double click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>8</b></td>\n              <td>mouseOverEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved over the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>9</b></td>\n              <td>MouseOutEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved out of the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <!-- Polygon tab -->\n      <div class=\"tab-pane fade\" id=\"polygon\" role=\"tabpanel\">\n        <h2>Polygon</h2>\n        <p>\n          To add a polygon element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\n        </p>\n        <code>\n          &lt;svg-polygon&gt; &lt;/svg-polygon&gt;\n        </code>\n        <p></p>\n        <p>In the below table you can see explanation of the input and output parameters for the polygon.</p>\n        <table class=\"table table-responsive\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Explanation</th>\n              <th>Mandatory</th>\n              <th>Default value</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td><b>1</b></td>\n              <td>points</td>\n              <td>Input parameter <code>(Array)</code></td>\n              <td>Array with an array of x,y points. For example [[0, 50], [50, 100], [100, 50], [50, 0], [0, 50]].</td>\n              <td><b>YES</b></td>\n              <td><code>undefined</code></td>\n            </tr>\n            <tr>\n              <td><b>2</b></td>\n              <td>borderSize</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Size of the border for the polygon.</td>\n              <td><b>YES</b></td>\n              <td><code>undefined</code></td>\n            </tr>\n            <tr>\n              <td><b>3</b></td>\n              <td>borderColor</td>\n              <td>Input parameter <code>(string)</code></td>\n              <td>Border color of the polygon (name, HEX, rgb).</td>\n              <td><b>NO</b></td>\n              <td><code>'#000'</code></td>\n            </tr>\n            <tr>\n              <td><b>4</b></td>\n              <td>fill</td>\n              <td>Input parameter <code>(string)</code></td>\n              <td>Fill color of the polygon (name, HEX, rgb).</td>\n              <td><b>NO</b></td>\n              <td><code>'#000'</code></td>\n            </tr>\n            <tr>\n              <td><b>5</b></td>\n              <td>classes</td>\n              <td>Input parameter <code>(array of strings)</code></td>\n              <td>List of CSS classes which will be added.</td>\n              <td><b>NO</b></td>\n              <td><code>[]</code></td>\n            </tr>\n            <tr>\n              <td><b>6</b></td>\n              <td>clickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>7</b></td>\n              <td>doubleClickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when double click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>8</b></td>\n              <td>mouseOverEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved over the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>9</b></td>\n              <td>MouseOutEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved out of the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <!-- Image tab -->\n      <div class=\"tab-pane fade\" id=\"image\" role=\"tabpanel\">\n        <h2>Image</h2>\n        <p>\n          To add a image element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\n        </p>\n        <code>\n          &lt;svg-image&gt; &lt;/svg-image&gt;\n        </code>\n        <p></p>\n        <p>In the below table you can see explanation of the input and output parameters for the image.</p>\n        <table class=\"table table-responsive\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Explanation</th>\n              <th>Mandatory</th>\n              <th>Default value</th>\n            </tr>\n          </thead>\n        \n          <tbody>\n            <tr>\n              <td><b>1</b></td>\n              <td>imageUrl</td>\n              <td>Input parameter <code>(string)</code></td>\n              <td>Path to the image for SVG image.</td>\n              <td><b>YES</b></td>\n              <td><code>undefined</code></td>\n            </tr>\n            <tr>\n              <td><b>2</b></td>\n              <td>x</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Starting point on x axis.</td>\n              <td><b>NO</b></td>\n              <td><code>0</code></td>\n            </tr>\n            <tr>\n              <td><b>3</b></td>\n              <td>y</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Starting point on y axis.</td>\n              <td><b>NO</b></td>\n              <td><code>0</code></td>\n            </tr>\n            <tr>\n              <td><b>4</b></td>\n              <td>height</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Height of the image.</td>\n              <td><b>NO</b></td>\n              <td><code>100</code></td>\n            </tr>\n            <tr>\n              <td><b>5</b></td>\n              <td>width</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Width of the image.</td>\n              <td><b>NO</b></td>\n              <td><code>100</code></td>\n            </tr>\n            <tr>\n              <td><b>6</b></td>\n              <td>classes</td>\n              <td>Input parameter <code>(array of strings)</code></td>\n              <td>List of CSS classes which will be added.</td>\n              <td><b>NO</b></td>\n              <td><code>[]</code></td>\n            </tr>\n            <tr>\n              <td><b>7</b></td>\n              <td>clickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>8</b></td>\n              <td>doubleClickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when double click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>9</b></td>\n              <td>mouseOverEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved over the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>10</b></td>\n              <td>MouseOutEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved out of the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <!-- Path tab -->\n      <div class=\"tab-pane fade\" id=\"path\" role=\"tabpanel\">\n        <h2>Path</h2>\n        <p>\n          To add a path element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\n        </p>\n        <code>\n          &lt;svg-path&gt; &lt;/svg-path&gt;\n        </code>\n        <p></p>\n        <p>In the below table you can see explanation of the input and output parameters for the path.</p>\n        <table class=\"table table-responsive\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Explanation</th>\n              <th>Mandatory</th>\n              <th>Default value</th>\n            </tr>\n          </thead>\n        \n          <tbody>\n            <tr>\n              <td><b>1</b></td>\n              <td>path</td>\n              <td>Input parameter <code>(string)</code></td>\n              <td>A valid path which will be displayed.</td>\n              <td><b>YES</b></td>\n              <td><code>undefined</code></td>\n            </tr>\n            <tr>\n              <td><b>2</b></td>\n              <td>borderColor</td>\n              <td>Input parameter <code>(string)</code></td>\n              <td>Border color which will be used for the path.</td>\n              <td><b>NO</b></td>\n              <td><code>'#000'</code></td>\n            </tr>\n            <tr>\n              <td><b>3</b></td>\n              <td>borderSize</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Border size which will be used for the path.</td>\n              <td><b>NO</b></td>\n              <td><code>2</code></td>\n            </tr>\n            <tr>\n              <td><b>4</b></td>\n              <td>x</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Starting point on x axis.</td>\n              <td><b>NO</b></td>\n              <td><code>0</code></td>\n            </tr>\n            <tr>\n              <td><b>5</b></td>\n              <td>y</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Starting point on y axis.</td>\n              <td><b>NO</b></td>\n              <td><code>0</code></td>\n            </tr>\n            <tr>\n              <td><b>6</b></td>\n              <td>fill</td>\n              <td>Input parameter <code>(string)</code></td>\n              <td>Fill color of the path.</td>\n              <td><b>NO</b></td>\n              <td><code>''</code></td>\n            </tr>\n            <tr>\n              <td><b>7</b></td>\n              <td>classes</td>\n              <td>Input parameter <code>(array of strings)</code></td>\n              <td>List of CSS classes which will be added.</td>\n              <td><b>NO</b></td>\n              <td><code>[]</code></td>\n            </tr>\n            <tr>\n              <td><b>8</b></td>\n              <td>clickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>9</b></td>\n              <td>doubleClickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when double click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>10</b></td>\n              <td>mouseOverEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved over the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>11</b></td>\n              <td>MouseOutEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved out of the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n          </tbody>\n        </table>\n        <p>Path uses complex data in string format to create the SVG. For more information, you can take a look at <a href=\"https://www.w3.org/TR/SVG/paths.html#PathData\" target=\"_blank\">official SVG Path documentation</a>.</p>\n      </div>\n\n      <!-- Text tab -->\n      <div class=\"tab-pane fade\" id=\"text\" role=\"tabpanel\">\n        <h2>Text</h2>\n        <p>\n          To add a text element to the svg-container, you must add the following element inside the <code>svg-container</code> component tag -\n        </p>\n        <code>\n          &lt;svg-text&gt; &lt;/svg-text&gt;\n        </code>\n        <p></p>\n        <p>In the below table you can see explanation of the input and output parameters for the text.</p>\n        <table class=\"table table-responsive\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Name</th>\n              <th>Type</th>\n              <th>Explanation</th>\n              <th>Mandatory</th>\n              <th>Default value</th>\n            </tr>\n          </thead>\n        \n          <tbody>\n            <tr>\n              <td><b>1</b></td>\n              <td>text</td>\n              <td>Input parameter <code>(string)</code></td>\n              <td>Text that will be set for the element.</td>\n              <td><b>YES</b></td>\n              <td><code>undefined</code></td>\n            </tr>\n            <tr>\n              <td><b>2</b></td>\n              <td>color</td>\n              <td>Input parameter <code>(string)</code></td>\n              <td>Color of the text.</td>\n              <td><b>NO</b></td>\n              <td><code>'#000'</code></td>\n            </tr>\n            <tr>\n              <td><b>3</b></td>\n              <td>x</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Starting point on x axis.</td>\n              <td><b>NO</b></td>\n              <td><code>0</code></td>\n            </tr>\n            <tr>\n              <td><b>4</b></td>\n              <td>y</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Starting point on y axis.</td>\n              <td><b>NO</b></td>\n              <td><code>0</code></td>\n            </tr>\n            <tr>\n              <td><b>5</b></td>\n              <td>size</td>\n              <td>Input parameter <code>(number)</code></td>\n              <td>Size of the text.</td>\n              <td><b>NO</b></td>\n              <td><code>10</code></td>\n            </tr>\n            <tr>\n              <td><b>6</b></td>\n              <td>classes</td>\n              <td>Input parameter <code>(array of strings)</code></td>\n              <td>List of CSS classes which will be added.</td>\n              <td><b>NO</b></td>\n              <td><code>[]</code></td>\n            </tr>\n            <tr>\n              <td><b>7</b></td>\n              <td>clickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>8</b></td>\n              <td>doubleClickEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when double click event happens on the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>9</b></td>\n              <td>mouseOverEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved over the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n            <tr>\n              <td><b>10</b></td>\n              <td>MouseOutEvent</td>\n              <td>Output parameter <code>(MouseEvent)</code></td>\n              <td>Is fired when mouse is moved out of the element.</td>\n              <td><b>NO</b></td>\n              <td><code>N/A</code></td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n\n      <!-- Custom CSS Classes tab -->\n      <div class=\"tab-pane fade\" id=\"classes\" role=\"tabpanel\">\n        <h2>Custom CSS Classes</h2>\n        <p>If you are using custom css classes, make sure that you define them using <code>::ng-deep</code> combinator, otherwise <code>ngx-svg</code> components won't see the classes.</p>\n        <p>To avoid leaking styles to other components, make sure to use <code>:host</code> combinator as well.</p>\n        <p>You can find more information on the <a href=\"https://angular.io/guide/component-styles\" target=\"_blank\">official Angular documentation</a>.</p>\n      </div>\n\n      <!-- Troubleshooting tab -->\n      <div class=\"tab-pane fade\" id=\"troubleshooting\" role=\"tabpanel\">\n        <h2>Troubleshooting</h2>\n        <p>In case of any questions or issues, please open a new question / issue on our <a href=\"https://github.com/vvaldersteins/ngx-svg/issues\" target=\"_blank\">GitHub repository</a>.</p>\n      </div>\n\n      <!-- License tab -->\n      <div class=\"tab-pane fade\" id=\"license\" role=\"tabpanel\">\n        <h2>License</h2>\n        <p>ngx-svg is developed under MIT license.</p>\n      </div>\n    </div>\n  </div>\n</div>","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\ninterface Image {\n  imageUrl: string;\n  x?: number;\n  y?: number;\n  width?: number;\n  height?: number;\n}\n\n@Component({\n  templateUrl: 'image.component.html'\n})\nexport class ImageComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  public images: Image[] = [{\n    imageUrl: 'ngx-svg/assets/dog.png',\n    x: 100,\n    y: 100,\n    width: 100,\n    height: 100\n  }];\n\n  /**\n   * Creates image component object instance.\n   */\n  constructor() { }\n\n  /**\n   * Adds new image element.\n   */\n  addNew() {\n    this.images.push({\n      imageUrl: 'ngx-svg/assets/dog.png',\n      x: 0,\n      y: 0,\n      width: 100,\n      height: 100\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.images.map(el => el.height + el.y)) + 20;\n  }\n\n  /**\n   * Removes specific image element.\n   * @param index - Index of image, which needs to be removed.\n   */\n  removeRow(index: number) {\n    this.images.splice(index, 1);\n  }\n}\n","<!-- Header of the image -->\n<div class=\"jumbotron jumbotron-fluid\">\n  <div class=\"container\">\n    <h1 class=\"display-4 text-center\">Image</h1>\n  </div>\n</div>\n\n<div class=\"container-fluid\">\n  <div class=\"row no-gutters\">\n    <div class=\"col-12\">\n      <!-- Svg Container with images -->\n      <svg-container containerId=\"image\" [height]=\"getHeight()\">\n        <svg-image [imageUrl]=\"image.imageUrl\" [height]=\"image.height\" [width]=\"image.width\"\n          [x]=\"image.x\" [y]=\"image.y\" *ngFor=\"let image of images\"></svg-image>\n      </svg-container>\n    </div>\n\n    <div class=\"col-12\">\n      <!-- Svg Image configuration -->\n      <div class=\"table-responsive\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Image URL</th>\n              <th>X position</th>\n              <th>Y position</th>\n              <th>Width</th>\n              <th>Height</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <ng-container *ngIf=\"images.length > 0\">\n              <tr *ngFor=\"let image of images; let index = index;\">\n                <td class=\"align-middle\">\n                  <b>{{ index + 1 }}</b>\n                </td>\n                <td>\n                  <input type=\"string\" [(ngModel)]=\"image.imageUrl\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"image.x\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"image.y\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"image.width\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"image.height\" class=\"form-control\" />\n                </td>\n                <td>\n                  <button class=\"btn btn-danger\" (click)=\"removeRow(index)\">Remove</button>\n                </td>\n              </tr>\n            </ng-container>\n            <tr *ngIf=\"images.length === 0\">\n              <td colspan=\"7\" class=\"text-center\">\n                There are no images\n              </td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <tr>\n              <td colspan=\"7\">\n                <button class=\"btn btn-success float-right\" (click)=\"addNew()\">Add New image</button>\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n    </div>\n  </div>\n</div>","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\ninterface Line {\n  borderSize: number;\n  borderColor?: string;\n  x0?: number;\n  y0?: number;\n  x1?: number;\n  y1?: number;\n}\n\n@Component({\n  templateUrl: 'line.component.html'\n})\nexport class LineComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  public lines: Line[] = [{\n    borderSize: 10,\n    borderColor: 'rgba(125, 125, 32, 0.5)',\n    x0: 20,\n    y0: 30,\n    x1: 55,\n    y1: 85\n  }, {\n    borderSize: 10,\n    borderColor: 'rgba(12, 32, 222, 0.7)',\n    x0: 30,\n    y0: 20,\n    x1: 85,\n    y1: 55\n  }, {\n    borderSize: 10,\n    borderColor: 'rgba(18, 52, 23, 0.7)',\n    x0: 20,\n    y0: 60,\n    x1: 50,\n    y1: 20\n  }];\n\n  /**\n   * Creates line component object instance.\n   */\n  constructor() { }\n\n  /**\n   * Adds new line element.\n   */\n  addNew() {\n    this.lines.push({\n      borderSize: 0,\n      borderColor: '#000',\n      x0: 0,\n      y0: 0,\n      x1: 1,\n      y1: 1\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.lines.map(el => {\n      if (el.y0 > el.y1) {\n        return el.y0;\n      } else {\n        return el.y1;\n      }\n    })) + 20;\n  }\n\n  /**\n   * Removes specific line element.\n   * @param index - Index of a line which needs to be removed.\n   */\n  removeRow(index: number) {\n    this.lines.splice(index, 1);\n  }\n}\n","<!-- Header of the line -->\n<div class=\"jumbotron jumbotron-fluid\">\n  <div class=\"container\">\n    <h1 class=\"display-4 text-center\">Line</h1>\n  </div>\n</div>\n\n<div class=\"container-fluid\">\n  <div class=\"row no-gutters\">\n    <div class=\"col-12\">\n      <!-- Svg Container with lines -->\n      <svg-container containerId=\"line\" [height]=\"getHeight()\">\n        <svg-line [borderSize]=\"line.borderSize\" [borderColor]=\"line.borderColor\"\n          [x0]=\"line.x0\" [y0]=\"line.y0\" [x1]=\"line.x1\" [y1]=\"line.y1\" *ngFor=\"let line of lines\"></svg-line>\n      </svg-container>\n    </div>\n\n    <div class=\"col-12\">\n      <!-- Svg line configuration -->\n      <div class=\"table-responsive\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Border Size</th>\n              <th>Border Color</th>\n              <th>X Start position</th>\n              <th>Y Start position</th>\n              <th>X End position</th>\n              <th>Y End position</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <ng-container *ngIf=\"lines.length > 0\">\n              <tr *ngFor=\"let line of lines; let index = index;\">\n                <td class=\"align-middle\">\n                  <b>{{ index + 1 }}</b>\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"line.borderSize\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"string\" [(ngModel)]=\"line.borderColor\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"line.x0\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"line.y0\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"line.x1\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"line.y1\" class=\"form-control\" />\n                </td>\n                <td>\n                  <button class=\"btn btn-danger\" (click)=\"removeRow(index)\">Remove</button>\n                </td>\n              </tr>\n            </ng-container>\n            <tr *ngIf=\"lines.length === 0\">\n              <td colspan=\"8\" class=\"text-center\">\n                There are no lines\n              </td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <tr>\n              <td colspan=\"8\">\n                <button class=\"btn btn-success float-right\" (click)=\"addNew()\">Add New line</button>\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n    </div>\n  </div>\n</div>","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\ninterface Path {\n  path: string;\n  borderSize?: number;\n  borderColor?: string;\n  x?: number;\n  y?: number;\n  fill?: string;\n}\n\n@Component({\n  templateUrl: 'path.component.html'\n})\nexport class PathComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  public paths: Path[] = [{\n    path: 'M10 80 C 40 10, 65 10, 95 80 S 150 150, 180 80',\n    borderSize: 4,\n    borderColor: 'rgba(125, 125, 32, 0.5)',\n    x: 20,\n    y: 30,\n    fill: ''\n  }];\n\n  /**\n   * Creates path component object instance.\n   */\n  constructor() { }\n\n  /**\n   * Adds new path element.\n   */\n  addNew() {\n    this.paths.push({\n      path: '',\n      borderSize: 2,\n      borderColor: '#000',\n      x: 0,\n      y: 0,\n      fill: ''\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.paths.map(el =>\n      el.y +\n      Math.max.apply(Math, el.path.replace(/[^0-9 ]/g, '').replace(/\\s\\s+/g, ' ').split(' ').filter((element, index) => index % 2 !== 0)))\n    ) + 20;\n  }\n\n  /**\n   * Removes specific path element.\n   * @param index - Index of a path which needs to be removed.\n   */\n  removeRow(index: number) {\n    this.paths.splice(index, 1);\n  }\n}\n","<!-- Header of the path -->\n<div class=\"jumbotron jumbotron-fluid\">\n  <div class=\"container\">\n    <h1 class=\"display-4 text-center\">Path</h1>\n  </div>\n</div>\n\n<div class=\"container-fluid\">\n  <div class=\"row no-gutters\">\n    <div class=\"col-12\">\n      <!-- Svg Container with paths -->\n      <svg-container containerId=\"path\" [height]=\"getHeight()\">\n        <svg-path [borderSize]=\"path.borderSize\" [borderColor]=\"path.borderColor\" [fill]=\"path.fill\"\n          [x]=\"path.x\" [y]=\"path.y\" [path]=\"path.path\" *ngFor=\"let path of paths\"></svg-path>\n      </svg-container>\n    </div>\n\n    <div class=\"col-12\">\n      <!-- Svg patb configuration -->\n      <div class=\"table-responsive\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Path</th>\n              <th>Border Size</th>\n              <th>Border Color</th>\n              <th>X position</th>\n              <th>Y position</th>\n              <th>Fill</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <ng-container *ngIf=\"paths.length > 0\">\n              <tr *ngFor=\"let path of paths; let index = index;\">\n                <td class=\"align-middle\">\n                  <b>{{ index + 1 }}</b>\n                </td>\n                <td>\n                  <input type=\"string\" [(ngModel)]=\"path.path\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"path.borderSize\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"string\" [(ngModel)]=\"path.borderColor\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"path.x\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"path.y\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"string\" [(ngModel)]=\"path.fill\" class=\"form-control\" />\n                </td>\n                <td>\n                  <button class=\"btn btn-danger\" (click)=\"removeRow(index)\">Remove</button>\n                </td>\n              </tr>\n            </ng-container>\n            <tr *ngIf=\"paths.length === 0\">\n              <td colspan=\"8\" class=\"text-center\">\n                There are no paths\n              </td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <tr>\n              <td colspan=\"8\">\n                <button class=\"btn btn-success float-right\" (click)=\"addNew()\">Add New path</button>\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n    </div>\n  </div>\n</div>","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\ninterface Polygon {\n  borderSize: number;\n  borderColor?: string;\n  fill?: string;\n  points: number[][];\n}\n\n@Component({\n  templateUrl: 'polygon.component.html'\n})\nexport class PolygonComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  public polygons: Polygon[] = [{\n    borderSize: 2,\n    borderColor: 'rgba(125, 125, 32, 0.5)',\n    fill: 'rgba(100, 100, 20, 0.2)',\n    points: [[10, 100], [100, 100], [100, 10], [10, 10]]\n  }, {\n    borderSize: 3,\n    borderColor: 'rgba(23, 25, 255, 1)',\n    fill: 'rgba(0, 0, 0, 0)',\n    points: [[200, 150], [210, 190], [250, 200], [210, 210], [200, 250], [190, 210], [150, 200], [190, 190]]\n  }];\n\n  /**\n   * Creates polygon component object instance.\n   */\n  constructor() { }\n\n  /**\n   * Adds new polygon element.\n   */\n  addNew() {\n    this.polygons.push({\n      borderSize: 0,\n      borderColor: '#000',\n      points: [[]]\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.polygons.map(el => {\n      let maxValue;\n      const max = Math.max.apply(Math, el.points.map(point => {\n        if (maxValue === undefined || (maxValue !== undefined && point[1] > maxValue)) {\n          maxValue = point[1];\n        }\n\n        return maxValue;\n      }));\n\n      return max;\n    })) + 20;\n  }\n\n  /**\n   * Adds new points element at the end of the list.\n   * @param polygon - Polygon object for which to add new points element.\n   */\n  addNewPoint(polygon: Polygon) {\n    polygon.points.push([]);\n  }\n\n  /**\n   * Removes a specific point from the points list.\n   * @param polygon - Polygon object for which point needs to be removed.\n   * @param index - Index which needs to be removed.\n   */\n  removePoint(polygon: Polygon, index: number) {\n    polygon.points.splice(index, 1);\n  }\n\n  /**\n   * Removes specific polygon element.\n   * @param index - Index which needs to be removed\n   */\n  removeRow(index: number) {\n    this.polygons.splice(index, 1);\n  }\n}\n","<!-- Header of the polygon -->\n<div class=\"jumbotron jumbotron-fluid\">\n  <div class=\"container\">\n    <h1 class=\"display-4 text-center\">Polygon</h1>\n  </div>\n</div>\n\n<div class=\"container-fluid\">\n  <div class=\"row no-gutters\">\n    <div class=\"col-12\">\n      <!-- Svg Container with lines -->\n      <svg-container containerId=\"polygon\" [height]=\"getHeight()\">\n        <svg-polygon [borderSize]=\"polygon.borderSize\" [borderColor]=\"polygon.borderColor\"\n          [fill]=\"polygon.fill\" [points]=\"polygon.points\" *ngFor=\"let polygon of polygons\"></svg-polygon>\n      </svg-container>\n    </div>\n\n    <div class=\"col-12\">\n      <!-- Svg line configuration -->\n      <div class=\"table-responsive\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Border Size</th>\n              <th>Border Color</th>\n              <th>Fill Color</th>\n              <th class=\"text-center\">Points</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <ng-container *ngIf=\"polygons.length > 0\">\n              <tr *ngFor=\"let polygon of polygons; let index = index;\">\n                <td class=\"align-middle\">\n                  <b>{{ index + 1 }}</b>\n                </td>\n                <td class=\"align-middle\">\n                  <input type=\"number\" [(ngModel)]=\"polygon.borderSize\" class=\"form-control\" />\n                </td>\n                <td class=\"align-middle\">\n                  <input type=\"string\" [(ngModel)]=\"polygon.borderColor\" class=\"form-control\" />\n                </td>\n                <td class=\"align-middle\">\n                  <input type=\"string\" [(ngModel)]=\"polygon.fill\" class=\"form-control\" />\n                </td>\n                <td>\n                  <tr>\n                    <th>X point</th>\n                    <th>Y point</th>\n                    <th>Actions</th>\n                  </tr>\n\n                  <ng-container *ngIf=\"polygon.points.length > 0\">\n                    <tr *ngFor=\"let point of polygon.points; let pointIndex = index;\">\n                      <td>\n                        <input type=\"number\" [(ngModel)]=\"point[0]\" class=\"form-control\" />\n                      </td>\n                      <td>\n                        <input type=\"number\" [(ngModel)]=\"point[1]\" class=\"form-control\" />\n                      </td>\n                      <td>\n                        <button class=\"btn btn-danger\" (click)=\"removePoint(polygon, pointIndex)\">Remove</button>\n                      </td>\n                    </tr>\n                  </ng-container>\n\n                  <tr *ngIf=\"polygon.points.length === 0\">\n                    <td colspan=\"3\">\n                      There are no points for this polygon\n                    </td>\n                  </tr>\n\n                  <tr>\n                    <td colspan=\"3\">\n                      <button class=\"btn btn-success float-right\" (click)=\"addNewPoint(polygon)\">Add New Point</button>\n                    </td>\n                  </tr>\n                </td>\n                <td class=\"align-middle\">\n                  <button class=\"btn btn-danger\" (click)=\"removeRow(index)\">Remove</button>\n                </td>\n              </tr>\n            </ng-container>\n            <tr *ngIf=\"polygons.length === 0\">\n              <td colspan=\"6\" class=\"text-center\">\n                There are no polygons\n              </td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <tr>\n              <td colspan=\"6\">\n                <button class=\"btn btn-success float-right\" (click)=\"addNew()\">Add New polygon</button>\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n    </div>\n  </div>\n</div>","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\ninterface Polyline {\n  borderSize: number;\n  borderColor?: string;\n  fill?: string;\n  points: number[][];\n}\n\n@Component({\n  templateUrl: 'polyline.component.html'\n})\nexport class PolylineComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  public polylines: Polyline[] = [{\n    borderSize: 2,\n    borderColor: 'rgba(125, 125, 32, 0.5)',\n    fill: 'rgba(100, 100, 20, 0.2)',\n    points: [[10, 100], [100, 100], [100, 10], [10, 10], [10, 100]]\n  }, {\n    borderSize: 3,\n    borderColor: 'rgba(23, 25, 255, 1)',\n    fill: 'rgba(0, 0, 0, 0)',\n    points: [[200, 150], [210, 190], [250, 200], [210, 210], [200, 250], [190, 210], [150, 200], [190, 190]]\n  }];\n\n  /**\n   * Creates polyline component object instance.\n   */\n  constructor() { }\n\n  /**\n   * Adds new polyline element.\n   */\n  addNew() {\n    this.polylines.push({\n      borderSize: 0,\n      borderColor: '#000',\n      points: [[]]\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.polylines.map(el => {\n      let maxValue;\n      const max = Math.max.apply(Math, el.points.map(point => {\n        if (maxValue === undefined || (maxValue !== undefined && point[1] > maxValue)) {\n          maxValue = point[1];\n        }\n\n        return maxValue;\n      }));\n\n      return max;\n    })) + 20;\n  }\n\n  /**\n   * Adds new points element at the end of the list.\n   * @param polyline - Polyline object for which to add new points element.\n   */\n  addNewPoint(polyline: Polyline) {\n    polyline.points.push([]);\n  }\n\n  /**\n   * Removes a specific point from the points list.\n   * @param polyline - Polyline object for which point needs to be removed.\n   * @param index - Index which needs to be removed.\n   */\n  removePoint(polyline: Polyline, index: number) {\n    polyline.points.splice(index, 1);\n  }\n\n  /**\n   * Removes specific polyline element.\n   * @param index - Index which needs to be removed\n   */\n  removeRow(index: number) {\n    this.polylines.splice(index, 1);\n  }\n}\n","<!-- Header of the polyline -->\n<div class=\"jumbotron jumbotron-fluid\">\n  <div class=\"container\">\n    <h1 class=\"display-4 text-center\">Polyline</h1>\n  </div>\n</div>\n\n<div class=\"container-fluid\">\n  <div class=\"row no-gutters\">\n    <div class=\"col-12\">\n      <!-- Svg Container with lines -->\n      <svg-container containerId=\"polyline\" [height]=\"getHeight()\">\n        <svg-polyline [borderSize]=\"polyline.borderSize\" [borderColor]=\"polyline.borderColor\"\n          [fill]=\"polyline.fill\" [points]=\"polyline.points\" *ngFor=\"let polyline of polylines\"></svg-polyline>\n      </svg-container>\n    </div>\n\n    <div class=\"col-12\">\n      <!-- Svg line configuration -->\n      <div class=\"table-responsive\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Border Size</th>\n              <th>Border Color</th>\n              <th>Fill Color</th>\n              <th class=\"text-center\">Points</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <ng-container *ngIf=\"polylines.length > 0\">\n              <tr *ngFor=\"let polyline of polylines; let index = index;\">\n                <td class=\"align-middle\">\n                  <b>{{ index + 1 }}</b>\n                </td>\n                <td class=\"align-middle\">\n                  <input type=\"number\" [(ngModel)]=\"polyline.borderSize\" class=\"form-control\" />\n                </td>\n                <td class=\"align-middle\">\n                  <input type=\"string\" [(ngModel)]=\"polyline.borderColor\" class=\"form-control\" />\n                </td>\n                <td class=\"align-middle\">\n                  <input type=\"string\" [(ngModel)]=\"polyline.fill\" class=\"form-control\" />\n                </td>\n                <td>\n                  <tr>\n                    <th>X point</th>\n                    <th>Y point</th>\n                    <th>Actions</th>\n                  </tr>\n\n                  <ng-container *ngIf=\"polyline.points.length > 0\">\n                    <tr *ngFor=\"let point of polyline.points; let pointIndex = index;\">\n                      <td>\n                        <input type=\"number\" [(ngModel)]=\"point[0]\" class=\"form-control\" />\n                      </td>\n                      <td>\n                        <input type=\"number\" [(ngModel)]=\"point[1]\" class=\"form-control\" />\n                      </td>\n                      <td>\n                        <button class=\"btn btn-danger\" (click)=\"removePoint(polyline, pointIndex)\">Remove</button>\n                      </td>\n                    </tr>\n                  </ng-container>\n\n                  <tr *ngIf=\"polyline.points.length === 0\">\n                    <td colspan=\"3\">\n                      There are no points for this polyline\n                    </td>\n                  </tr>\n\n                  <tr>\n                    <td colspan=\"3\">\n                      <button class=\"btn btn-success float-right\" (click)=\"addNewPoint(polyline)\">Add New Point</button>\n                    </td>\n                  </tr>\n                </td>\n                <td class=\"align-middle\">\n                  <button class=\"btn btn-danger\" (click)=\"removeRow(index)\">Remove</button>\n                </td>\n              </tr>\n            </ng-container>\n            <tr *ngIf=\"polylines.length === 0\">\n              <td colspan=\"6\" class=\"text-center\">\n                There are no polylines\n              </td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <tr>\n              <td colspan=\"6\">\n                <button class=\"btn btn-success float-right\" (click)=\"addNew()\">Add New polyline</button>\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n    </div>\n  </div>\n</div>","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\ninterface Rectangular {\n  height: number;\n  width: number;\n  color?: string;\n  x?: number;\n  y?: number;\n}\n\n@Component({\n  templateUrl: 'rect.component.html'\n})\nexport class RectComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  public rectangulars: Rectangular[] = [{\n    height: 100,\n    width: 200,\n    color: 'rgba(125, 125, 32, 0.5)',\n    x: 20,\n    y: 30\n  }, {\n    height: 50,\n    width: 50,\n    color: 'rgba(12, 32, 222, 0.7)',\n    x: 200,\n    y: 20\n  }];\n\n  /**\n   * Creates rect component object instance.\n   */\n  constructor() { }\n\n  /**\n   * Adds new rectangular element.\n   */\n  addNew() {\n    this.rectangulars.push({\n      height: 0,\n      width: 0,\n      color: '#000',\n      x: 0,\n      y: 0\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.rectangulars.map(el => el.height + el.y)) + 20;\n  }\n\n  /**\n   * Removes specific rectangular element.\n   * @param index - Index of rectangular element, which needs to be removed.\n   */\n  removeRow(index: number) {\n    this.rectangulars.splice(index, 1);\n  }\n}\n","<!-- Header of the rectangular -->\n<div class=\"jumbotron jumbotron-fluid\">\n  <div class=\"container\">\n    <h1 class=\"display-4 text-center\">Rectangular</h1>\n  </div>\n</div>\n\n<div class=\"container-fluid\">\n  <div class=\"row no-gutters\">\n    <div class=\"col-12\">\n      <!-- Svg Container with rectangulars -->\n      <svg-container containerId=\"rectangular\" [height]=\"getHeight()\">\n        <svg-rect [height]=\"rectangular.height\" [width]=\"rectangular.width\" [color]=\"rectangular.color\"\n          [x]=\"rectangular.x\" [y]=\"rectangular.y\" *ngFor=\"let rectangular of rectangulars\"></svg-rect>\n      </svg-container>\n    </div>\n\n    <div class=\"col-12\">\n      <!-- Svg Rect configuration -->\n      <div class=\"table-responsive\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Height</th>\n              <th>Width</th>\n              <th>Color</th>\n              <th>X position</th>\n              <th>Y position</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <ng-container *ngIf=\"rectangulars.length > 0\">\n              <tr *ngFor=\"let rectangular of rectangulars; let index = index;\">\n                <td class=\"align-middle\">\n                  <b>{{ index + 1 }}</b>\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"rectangular.height\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"rectangular.width\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"string\" [(ngModel)]=\"rectangular.color\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"rectangular.x\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"rectangular.y\" class=\"form-control\" />\n                </td>\n                <td>\n                  <button class=\"btn btn-danger\" (click)=\"removeRow(index)\">Remove</button>\n                </td>\n              </tr>\n            </ng-container>\n            <tr *ngIf=\"rectangulars.length === 0\">\n              <td colspan=\"7\" class=\"text-center\">\n                There are no rectangulars\n              </td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <tr>\n              <td colspan=\"7\">\n                <button class=\"btn btn-success float-right\" (click)=\"addNew()\">Add New Rectangular</button>\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n    </div>\n  </div>\n</div>","/**\n * Import Angular libraries.\n */\nimport { Component } from '@angular/core';\n\ninterface Text {\n  text: string;\n  size?: number;\n  color?: string;\n  x?: number;\n  y?: number;\n}\n\n@Component({\n  templateUrl: 'text.component.html'\n})\nexport class TextComponent {\n  /**\n   * Globally used variables within the component.\n   */\n  public texts: Text[] = [{\n    text: 'Wow! This is awesome text with an opacity!',\n    size: 30,\n    color: 'rgba(125, 125, 32, 0.5)',\n    x: 20,\n    y: 30\n  }, {\n    text: 'Texts can have different sizes, positions and colors!',\n    size: 10,\n    color: 'rgba(12, 32, 222, 0.7)',\n    x: 200,\n    y: 80\n  }];\n\n  /**\n   * Creates text component object instance.\n   */\n  constructor() { }\n\n  /**\n   * Adds new text element.\n   */\n  addNew() {\n    this.texts.push({\n      text: '',\n      size: 10,\n      color: '#000',\n      x: 0,\n      y: 0\n    });\n  }\n\n  /**\n   * Retrieves the maximum height of all elements.\n   * @returns Height of the container.\n   */\n  getHeight(): number {\n    return Math.max.apply(Math, this.texts.map(el => el.y)) + 20;\n  }\n\n  /**\n   * Removes specific text element.\n   * @param index - Index of text element, which needs to be removed.\n   */\n  removeRow(index: number) {\n    this.texts.splice(index, 1);\n  }\n}\n","<!-- Header of the text -->\n<div class=\"jumbotron jumbotron-fluid\">\n  <div class=\"container\">\n    <h1 class=\"display-4 text-center\">Text</h1>\n  </div>\n</div>\n\n<div class=\"container-fluid\">\n  <div class=\"row no-gutters\">\n    <div class=\"col-12\">\n      <!-- Svg Container with texts -->\n      <svg-container containerId=\"text\" [height]=\"getHeight()\">\n        <svg-text [size]=\"text.size\" [text]=\"text.text\" [color]=\"text.color\"\n          [x]=\"text.x\" [y]=\"text.y\" *ngFor=\"let text of texts\"></svg-text>\n      </svg-container>\n    </div>\n\n    <div class=\"col-12\">\n      <!-- Svg Text configuration -->\n      <div class=\"table-responsive\">\n        <table class=\"table\">\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>Text</th>\n              <th>Color</th>\n              <th>Size</th>\n              <th>X position</th>\n              <th>Y position</th>\n              <th>Actions</th>\n            </tr>\n          </thead>\n          <tbody>\n            <ng-container *ngIf=\"texts.length > 0\">\n              <tr *ngFor=\"let text of texts; let index = index;\">\n                <td class=\"align-middle\">\n                  <b>{{ index + 1 }}</b>\n                </td>\n                <td>\n                  <input type=\"string\" [(ngModel)]=\"text.text\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"string\" [(ngModel)]=\"text.color\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"text.size\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"text.x\" class=\"form-control\" />\n                </td>\n                <td>\n                  <input type=\"number\" [(ngModel)]=\"text.y\" class=\"form-control\" />\n                </td>\n                <td>\n                  <button class=\"btn btn-danger\" (click)=\"removeRow(index)\">Remove</button>\n                </td>\n              </tr>\n            </ng-container>\n            <tr *ngIf=\"texts.length === 0\">\n              <td colspan=\"7\" class=\"text-center\">\n                There are no texts\n              </td>\n            </tr>\n          </tbody>\n          <tfoot>\n            <tr>\n              <td colspan=\"7\">\n                <button class=\"btn btn-success float-right\" (click)=\"addNew()\">Add New Text</button>\n              </td>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n    </div>\n  </div>\n</div>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}